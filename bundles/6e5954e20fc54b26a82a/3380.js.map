{"version":3,"file":"bundles/6e5954e20fc54b26a82a/3380.js","mappings":"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","sources":["webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index-wasm-esm.mjs","webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js"],"sourcesContent":["// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entry point for ESM environments which support the ES Module Integration Proposal for WebAssembly [1].\n *\n * [1]: https://github.com/webassembly/esm-integration\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    /** @type {typeof import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm.d.ts\")} */\n    // @ts-expect-error TSC can't find the definitions file, for some reason.\n    const wasm = await import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\");\n    bindings.__wbg_set_wasm(wasm);\n    wasm.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure43_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0def4b7acf9443a4(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure740_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1d83a6fb10cd0388(arg0, arg1);\n}\n\nfunction __wbg_adapter_70(arg0, arg1, arg2) {\n    wasm.closure427_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_788(arg0, arg1, arg2, arg3) {\n    wasm.closure439_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Base64EncodedPkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_base64encodedpkmessage_free(ptr >>> 0, 1));\n/**\n * The base64-encoded variant of a {@link PkMessage}.\n *\n * This can be useful if the encrypted message should be put into JSON.\n */\nexport class Base64EncodedPkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Base64EncodedPkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        Base64EncodedPkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Base64EncodedPkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_base64encodedpkmessage_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @returns {string}\n     */\n    get ciphertext() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ciphertext(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @param {string} arg0\n     */\n    set ciphertext(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @returns {string}\n     */\n    get mac() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_mac(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @param {string} arg0\n     */\n    set mac(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @returns {string}\n     */\n    get ephemeralKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @param {string} arg0\n     */\n    set ephemeralKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Creates a new base64-encoded encrypted message from its parts.\n     * @param {string} ciphertext\n     * @param {string} mac\n     * @param {string} ephemeral_key\n     */\n    constructor(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.base64encodedpkmessage_new(ptr0, len0, ptr1, len1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        Base64EncodedPkMessageFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Curve25519SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519secretkey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 secret key.\n */\nexport class Curve25519SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519secretkey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random Curve25519 secret key.\n     * @returns {Curve25519SecretKey}\n     */\n    static new() {\n        const ret = wasm.curve25519secretkey_new();\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a base64-encoded representation of\n     * the key.\n     * @param {string} string\n     * @returns {Curve25519SecretKey}\n     */\n    static fromBase64(string) {\n        const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n    /**\n     * Encodes the secret key into a base64 string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519secretkey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Converts the secret key into a raw byte vector.\n     * @returns {Uint8Array}\n     */\n    toUint8Array() {\n        const ret = wasm.curve25519secretkey_toUint8Array(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a raw byte slice.\n     * @param {Uint8Array} slice\n     * @returns {Curve25519SecretKey}\n     */\n    static fromUint8Array(slice) {\n        const ptr0 = passArray8ToWasm0(slice, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromUint8Array(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId | undefined}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState | undefined}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded string.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded string. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how an event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the event sender. Note this is untrusted data\n     * unless `verification_state` is also trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event. Note this\n     * is untrusted data unless `verification_state` is also\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of JSON strings, containing the decrypted to-device events.\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PkDecryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkdecryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key decryption instance.\n *\n * This implements the decryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkEncryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkDecryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkDecryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkDecryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkDecryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkdecryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkDecryption` instance with a newly generated key pair.\n     */\n    constructor() {\n        const ret = wasm.pkdecryption_new();\n        this.__wbg_ptr = ret >>> 0;\n        PkDecryptionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Creates a `PkDecryption` instance from a secret key.\n     * @param {Curve25519SecretKey} key\n     * @returns {PkDecryption}\n     */\n    static fromKey(key) {\n        _assertClass(key, Curve25519SecretKey);\n        const ret = wasm.pkdecryption_fromKey(key.__wbg_ptr);\n        return PkDecryption.__wrap(ret);\n    }\n    /**\n     * Returns the secret key associated with this `PkDecryption` instance.\n     * @returns {Curve25519SecretKey}\n     */\n    secretKey() {\n        const ret = wasm.pkdecryption_secretKey(this.__wbg_ptr);\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Returns the public key associated with this decryption instance.\n     *\n     * This can be used to construct a {@link PkEncryption} object to encrypt a\n     * message for this `PkDecryption` object.\n     * @returns {Curve25519PublicKey}\n     */\n    publicKey() {\n        const ret = wasm.pkdecryption_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Decrypts an encrypted message and returns the plaintext as a UTF-8\n     * string.\n     * @param {PkMessage} message\n     * @returns {string}\n     */\n    decryptString(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            _assertClass(message, PkMessage);\n            const ret = wasm.pkdecryption_decryptString(this.__wbg_ptr, message.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypts an encrypted message and returns the raw `Uint8Array`.\n     * @param {PkMessage} message\n     * @returns {Uint8Array}\n     */\n    decrypt(message) {\n        _assertClass(message, PkMessage);\n        const ret = wasm.pkdecryption_decrypt(this.__wbg_ptr, message.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst PkEncryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkencryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key encryption instance.\n *\n * This implements the encryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkDecryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkEncryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkEncryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkEncryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkencryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkEncryption` instance from a public key.\n     * @param {Curve25519PublicKey} public_key\n     * @returns {PkEncryption}\n     */\n    static fromKey(public_key) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ret = wasm.pkencryption_fromKey(public_key.__wbg_ptr);\n        return PkEncryption.__wrap(ret);\n    }\n    /**\n     * Encrypts a byte message and returns an encrypted {@link PkMessage}.\n     * @param {Uint8Array} message\n     * @returns {PkMessage}\n     */\n    encrypt(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Encrypts a string message and returns an encrypted {@link PkMessage}.\n     * @param {string} message\n     * @returns {PkMessage}\n     */\n    encryptString(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n}\n\nconst PkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkmessage_free(ptr >>> 0, 1));\n/**\n * A class representing an encrypted message using {@link PkEncryption}.\n */\nexport class PkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        PkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkmessage_free(ptr, 0);\n    }\n    /**\n     * Returns the raw ciphertext as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    ciphertext() {\n        const ret = wasm.pkmessage_ciphertext(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the raw message authentication code (MAC) as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    mac() {\n        const ret = wasm.pkmessage_mac(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the ephemeral public key used during encryption.\n     * @returns {Curve25519PublicKey}\n     */\n    ephemeralKey() {\n        const ret = wasm.pkmessage_ephemeralKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from its parts: ciphertext, MAC, and ephemeral\n     * key.\n     * @param {Uint8Array} ciphertext\n     * @param {Uint8Array} mac\n     * @param {Curve25519PublicKey} ephemeral_key\n     * @returns {PkMessage}\n     */\n    static fromParts(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(ephemeral_key, Curve25519PublicKey);\n        const ret = wasm.pkmessage_fromParts(ptr0, len0, ptr1, len1, ephemeral_key.__wbg_ptr);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from a base64-encoded representation.\n     * @param {Base64EncodedPkMessage} message\n     * @returns {PkMessage}\n     */\n    static fromBase64(message) {\n        _assertClass(message, Base64EncodedPkMessage);\n        const ret = wasm.pkmessage_fromBase64(message.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return PkMessage.__wrap(ret[0]);\n    }\n    /**\n     * Converts the `PkMessage` into a base64-encoded representation.\n     * @returns {Base64EncodedPkMessage}\n     */\n    toBase64() {\n        const ret = wasm.pkmessage_toBase64(this.__wbg_ptr);\n        return Base64EncodedPkMessage.__wrap(ret);\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_883d9432f9188ef2(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_9338901b80183e0f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_7d852dd9f194d43e(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_55a8d08e0491e17a() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_f2afc3766d4545cf() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_f450db7eeb71163f() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_26fc2e6856d8567a(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_cfd8f6868bdaed9b(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_c46c11d3dbe1b030() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_613cb921d67a4f26() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_ea1a2987dff7759e() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_873ac48adc772309() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_fcfd513cf4581834() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_e566459f7161f82f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_574e78ad8b13b65f(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_3cb59063b29f58c1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_f41e47509e8e4e36(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_3f08ae00cd288224() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_200677093b4cf756() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_2ecf7cf20900b3a2() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c8a90a7ed73e84ce(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_76286673af64a31f(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_ff4ddaabdfc5dbb3() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_from_2a5d3e218e67aa85(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_b11d8835dc4be0e8() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_304e868beec2021f() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_d1e60c13c0073374() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_e6903c610babcd42() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_3d90134a348e46b3() { return handleError(function (arg0, arg1) {\n    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));\n}, arguments) };\n\nexport function __wbg_getRandomValues_b8f5dbd5f3995a9e() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_46267b1c24877e30(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_8da03f81f6a1111e() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_93e54e8e166fbcab() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_e00ca5fff206ee3e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_b1f49280282046f8() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_f6b47b0dc333fd2f() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_3b4be85e0a44d2af(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_info_3daf2e093e091b66(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_f3469ce2244d2430(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_935168b8f4b49db3(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_c3c26b4103ad5aaf(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_29fefecef430db96() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_238152a0aedbb6e7(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_1872d19f5bcf83c6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_5c5d919204d42400(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_a61aeb35a24c1329(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_f2d27098bfd843e7(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_788(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_31a97dac4f10fab7(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_7a91e41fe43b3c92(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a239edaa1dc2968f(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_6d34787141015158(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_ee8e1b95dea9d37c(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_baedba94f03976fd() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_905d3e251edff8a2(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_807e54c39636c349() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_9bb1ab04a7012aaf(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_21878d46d25b64b6() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_e8337811e52861c6(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_1adef2266972fb45() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_238e247d18bde2cd() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_f4b061aa6d804b93() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_88b1390d99a7c691() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_e0c0b2993eb596e1() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_def2e24ef1252aff() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_dc0fbacc7c1c06f7(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_066faa31a6a88f5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ac0988aba3254290() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_4013cfdf4f22afb0(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_60cc747a6bc5215a() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_f29afabdf2c05826() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_6775f73144c2ef27(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_setonabort_3bf4db6614fa98e9(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_aebf64bd39f1eca8(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_4d19df0dadb7c4d4(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_b0d9d723b8fddbbb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_d7e3056cc6e56085(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_afa464ee777a396d(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_6ee07fa49ee1e3a5(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_dd24c422aa05df89(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_0a62d9d79a2a1ede(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_babc423936946a37() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d6d07c3c9963c49e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_e713aa7b07ccaedd(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_update_acd72607f506872a() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_68c4e9a54bb7fd5e() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_53465c57fc8cd691(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_a70a33e5bbc6d6db(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c01dfd4722a88165(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_4ca3906c248c47c4(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_6ce7b8525f302b4c(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1078(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 44, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2237(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 417, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5507(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 417, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7000(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 424, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7002(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 424, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n"],"names":["Proxy","get","Error","modPromise","async","initAsync","wasm","__wbindgen_start","loadModuleAsync","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_4","handleError","f","args","apply","this","e","__wbindgen_exn_store","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","isLikeNone","x","getArrayU8FromWasm0","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_6","dtor","a","b","makeMutClosure","arg0","arg1","cnt","real","original","makeClosure","debugString","type","description","name","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","passArray8ToWasm0","takeFromExternrefTable0","value","__externref_table_dealloc","_assertClass","instance","klass","passArrayJsValueToWasm0","array","add","setUint32","getArrayJsValueFromWasm0","result","push","getUint32","__externref_drop_slice","cachedUint16ArrayMemory0","getArrayU16FromWasm0","Uint16Array","getVersions","ret","Versions","__wrap","__wbg_adapter_58","arg2","closure43_externref_shim_multivalue_shim","__wbg_adapter_61","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0def4b7acf9443a4","__wbg_adapter_64","closure740_externref_shim","__wbg_adapter_67","_dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1d83a6fb10cd0388","__wbg_adapter_70","closure427_externref_shim","DecryptionErrorCode","Object","freeze","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","EncryptionAlgorithm","Ed25519","Curve25519","Unknown","OlmV1Curve25519AesSha2","MegolmV1AesSha2","HistoryVisibility","Invited","Joined","Shared","WorldReadable","LocalTrust","Verified","BlackListed","Ignored","Unset","LoggerLevel","Trace","Debug","Info","Warn","QrCodeMode","Login","Reciprocate","QrState","Created","Scanned","Confirmed","Reciprocated","Done","Cancelled","ShieldColor","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","Red","Grey","None","ShieldStateCode","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","TrustRequirement","Missing","Invalid","ValidButNotTrusted","ValidAndTrusted","Untrusted","CrossSignedOrLegacy","CrossSigned","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","VerificationRequestPhase","Requested","Ready","Transitioned","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","__wbg_attachment_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","__wbg_ptr","__destroy_into_raw","free","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","backupdecryptionkey_fromBase64","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","ptr4","len4","__wbindgen_free","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","v1","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","__wbg_base64encodedpkmessage_free","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","allDevices","collectstrategy_allDevices","errorOnUnverifiedUserProblem","collectstrategy_errorOnUnverifiedUserProblem","identityBasedStrategy","collectstrategy_identityBasedStrategy","onlyTrustedDevices","collectstrategy_onlyTrustedDevices","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","__wbg_curve25519secretkey_free","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","dehydrateddevice_keysForUpload","DehydratedDeviceKeyFinalization","__wbg_dehydrateddevicekey_free","dehydrateddevicekey_createRandomKey","createKeyFromArray","dehydrateddevicekey_createKeyFromArray","dehydrateddevicekey_toBase64","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","getDehydratedDeviceKey","dehydrateddevices_getDehydratedDeviceKey","saveDehydratedDeviceKey","dehydrateddevices_saveDehydratedDeviceKey","deleteDehydratedDeviceKey","dehydrateddevices_deleteDehydratedDeviceKey","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","__wbg_encryptedattachment_free","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","encryptioninfo_sender","encryptioninfo_senderDevice","encryptioninfo_senderCurve25519Key","encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","encrypt","deferred2_0","deferred2_1","establishedecies_encrypt","decrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","__wbg_get_inboundcreationresult_message","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","__wbg_get_keysclaimrequest_id","__wbg_get_keysclaimrequest_body","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","__wbg_get_keysqueryrequest_id","__wbg_get_keysqueryrequest_body","keysqueryrequest_new","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","__wbg_get_keysuploadrequest_id","__wbg_get_keysuploadrequest_body","keysuploadrequest_new","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","__wbg_get_megolmdecryptionerror_description","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","pickle_key","store_handle","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","decryptRoomEvent","decryption_settings","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","__wbg_get_outboundcreationresult_initial_message","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","__wbg_get_pickledinboundgroupsession_pickle","__wbg_get_pickledinboundgroupsession_senderKey","senderSigningKey","__wbg_get_pickledinboundgroupsession_senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","__wbg_get_pickledsession_pickle","__wbg_get_pickledsession_senderKey","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","__wbg_pkdecryption_free","__wbg_pkencryption_free","__wbg_pkmessage_free","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","roomid_toString","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","__wbg_get_roommessagerequest_id","__wbg_get_roommessagerequest_room_id","txn_id","__wbg_get_roommessagerequest_txn_id","__wbg_get_roommessagerequest_event_type","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","__wbg_get_signatureuploadrequest_id","__wbg_get_signatureuploadrequest_body","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","__wbg_get_todevicerequest_id","__wbg_get_todevicerequest_event_type","__wbg_get_todevicerequest_txn_id","__wbg_get_todevicerequest_body","todevicerequest_new","todevicerequest_type","TracingFinalization","__wbg_tracing_free","Tracing","isAvailable","tracing_isAvailable","min_level","tracing_new","minLevel","tracing_set_minLevel","turnOn","tracing_turnOn","turnOff","tracing_turnOff","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","__wbg_get_uploadsigningkeysrequest_body","uploadsigningkeysrequest_new","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","userid_toString","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","__wbg_get_versions_vodozemac","matrix_sdk_crypto","__wbg_get_versions_matrix_sdk_crypto","git_sha","__wbg_get_versions_git_sha","git_description","__wbg_get_versions_git_description","__wbg_String_8f0eb39a4a4c2f66","String","setInt32","__wbg_Window_b0044ac7db258535","Window","__wbg_WorkerGlobalScope_b74cefefc62a37da","WorkerGlobalScope","__wbg_add_883d9432f9188ef2","__wbg_add_9338901b80183e0f","arguments","__wbg_at_7d852dd9f194d43e","at","__wbg_backupkeys_new","__wbg_bound_55a8d08e0491e17a","IDBKeyRange","bound","__wbg_bound_f2afc3766d4545cf","arg3","__wbg_buffer_609cc3eee51ed158","__wbg_call_672a4d21634d4a24","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_clearTimeout_5a54f8841c30079a","clearTimeout","__wbg_clear_f450db7eeb71163f","__wbg_close_26fc2e6856d8567a","__wbg_code_cfd8f6868bdaed9b","__wbg_continue_c46c11d3dbe1b030","continue","__wbg_count_613cb921d67a4f26","__wbg_count_ea1a2987dff7759e","__wbg_createIndex_873ac48adc772309","createIndex","__wbg_createIndex_fcfd513cf4581834","__wbg_createObjectStore_e566459f7161f82f","createObjectStore","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_574e78ad8b13b65f","crypto","__wbg_debug_3cb59063b29f58c1","console","__wbg_debug_f41e47509e8e4e36","__wbg_decryptedroomevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_3f08ae00cd288224","deleteObjectStore","__wbg_delete_200677093b4cf756","delete","__wbg_delete_2ecf7cf20900b3a2","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_769e5ede4b31c67b","done","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_3265d4158b33e5dc","entries","__wbg_entries_c8a90a7ed73e84ce","__wbg_error_524f506f44df1645","error","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_76286673af64a31f","__wbg_error_ff4ddaabdfc5dbb3","__wbg_from_2a5d3e218e67aa85","from","__wbg_getAllKeys_b11d8835dc4be0e8","getAllKeys","__wbg_getAll_304e868beec2021f","getAll","__wbg_getAll_d1e60c13c0073374","__wbg_getAll_e6903c610babcd42","__wbg_getRandomValues_3d90134a348e46b3","globalThis","getRandomValues","__wbg_getRandomValues_b8f5dbd5f3995a9e","__wbg_getTime_46267b1c24877e30","getTime","__wbg_get_67b2ba62fc30de12","Reflect","__wbg_get_8da03f81f6a1111e","__wbg_get_93e54e8e166fbcab","__wbg_get_b9b93047fe3cf45b","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_global_b6f5c73312f62313","global","__wbg_inboundgroupsession_new","__wbg_index_e00ca5fff206ee3e","index","__wbg_indexedDB_601ec26c63e333de","indexedDB","__wbg_indexedDB_b1f49280282046f8","__wbg_indexedDB_f6b47b0dc333fd2f","__wbg_info_3b4be85e0a44d2af","info","__wbg_info_3daf2e093e091b66","__wbg_instanceof_ArrayBuffer_e14585432e3737fc","ArrayBuffer","__wbg_instanceof_Map_f3469ce2244d2430","Map","__wbg_instanceof_Promise_935168b8f4b49db3","Promise","__wbg_instanceof_Uint8Array_17156bcf118086a9","__wbg_isArray_a1eab7e0d067391b","__wbg_isSafeInteger_343e2beeeece1bb0","Number","isSafeInteger","__wbg_item_c3c26b4103ad5aaf","item","__wbg_iterator_9a24c88df860dc65","Symbol","iterator","__wbg_key_29fefecef430db96","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_238152a0aedbb6e7","__wbg_length_a446193dc22c12f8","__wbg_length_e2d2a49132c1b256","__wbg_lowerBound_1872d19f5bcf83c6","lowerBound","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_5c5d919204d42400","__wbg_msCrypto_a61aeb35a24c1329","msCrypto","__wbg_name_f2d27098bfd843e7","__wbg_new_23a2665fac83c611","state0","closure439_externref_shim","__wbg_adapter_788","__wbg_new_31a97dac4f10fab7","Date","__wbg_new_405e22f390576ce2","__wbg_new_5e0be73521bc8c17","__wbg_new_78feb108b6472713","__wbg_new_7a91e41fe43b3c92","Uint8ClampedArray","__wbg_new_8a6f238a6ece86ea","__wbg_new_a12002a7f91c75be","__wbg_new_a239edaa1dc2968f","Set","__wbg_newnoargs_105ed471475aaf50","Function","__wbg_newwithbyteoffsetandlength_6d34787141015158","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithlength_a381634e90c276d4","__wbg_newwithlength_ee8e1b95dea9d37c","__wbg_newwithmessage_baedba94f03976fd","DOMException","__wbg_next_25feadfc0913fea9","next","__wbg_next_6574e1a8a62d1055","__wbg_node_905d3e251edff8a2","node","__wbg_now_2c95c9de01293173","now","__wbg_now_807e54c39636c349","__wbg_objectStoreNames_9bb1ab04a7012aaf","objectStoreNames","__wbg_objectStore_21878d46d25b64b6","objectStore","__wbg_oldVersion_e8337811e52861c6","oldVersion","__wbg_olmmachine_new","__wbg_openCursor_1adef2266972fb45","openCursor","__wbg_openCursor_238e247d18bde2cd","__wbg_openCursor_f4b061aa6d804b93","__wbg_open_88b1390d99a7c691","__wbg_open_e0c0b2993eb596e1","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_def2e24ef1252aff","parse","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_process_dc0fbacc7c1c06f7","process","__wbg_push_737cfc8c1432c2c6","__wbg_put_066faa31a6a88f5b","put","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_97d92b4fcc8a61c5","queueMicrotask","__wbg_queueMicrotask_d3219def82552485","__wbg_randomFillSync_ac0988aba3254290","randomFillSync","__wbg_readyState_4013cfdf4f22afb0","readyState","indexOf","__wbg_rehydrateddevice_new","__wbg_require_60cc747a6bc5215a","__wbg_resolve_4851785c9c5f573d","resolve","__wbg_result_f29afabdf2c05826","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","setTimeout","__wbg_set_37837023f3d740e8","__wbg_set_3f1d0b984ed272ed","__wbg_set_65595bdd868b3009","__wbg_set_6775f73144c2ef27","__wbg_set_8fc6bf8a5b1071d1","__wbg_setonabort_3bf4db6614fa98e9","onabort","__wbg_setonblocked_aebf64bd39f1eca8","onblocked","__wbg_setoncomplete_4d19df0dadb7c4d4","oncomplete","__wbg_setonerror_b0d9d723b8fddbbb","onerror","__wbg_setonerror_d7e3056cc6e56085","__wbg_setonsuccess_afa464ee777a396d","onsuccess","__wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f","onupgradeneeded","__wbg_setonversionchange_6ee07fa49ee1e3a5","onversionchange","__wbg_setunique_dd24c422aa05df89","unique","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_88a902d13a557d07","__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0","__wbg_static_accessor_SELF_37c5d418e4bf5819","self","__wbg_static_accessor_WINDOW_5de37043a91a9c40","window","__wbg_storehandle_new","__wbg_stringify_f7ed6987935b4a24","__wbg_subarray_aa9065fa9dc5df96","__wbg_target_0a62d9d79a2a1ede","target","__wbg_then_44b73946d2fb3e7d","then","__wbg_then_48b406749878a531","__wbg_todevicerequest_new","__wbg_transaction_babc423936946a37","transaction","__wbg_transaction_d6d07c3c9963c49e","__wbg_transaction_e713aa7b07ccaedd","__wbg_update_acd72607f506872a","update","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_value_68c4e9a54bb7fd5e","__wbg_value_cd1ffa7b1ab794f1","__wbg_values_53465c57fc8cd691","values","__wbg_verificationrequest_new","__wbg_version_a70a33e5bbc6d6db","__wbg_versions_c01dfd4722a88165","versions","__wbg_warn_4ca3906c248c47c4","warn","__wbg_warn_6ce7b8525f302b4c","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","setBigInt64","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1078","__wbindgen_closure_wrapper2237","__wbindgen_closure_wrapper5507","__wbindgen_closure_wrapper7000","__wbindgen_closure_wrapper7002","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","grow","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","setFloat64","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number"],"sourceRoot":""}