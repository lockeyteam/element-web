{"version":3,"file":"bundles/09012d14ad6adde1f76e/1127.js","mappings":"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","sources":["webpack://element-web/./node_modules/file-saver/src/FileSaver.js","webpack://element-web/./src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx","webpack://element-web/./src/components/views/auth/PassphraseConfirmField.tsx","webpack://element-web/./src/components/views/auth/PassphraseField.tsx"],"sourcesContent":["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2019, 2020 , 2023 The Matrix.org Foundation C.I.C.\nCopyright 2018, 2019 New Vector Ltd\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type JSX, createRef } from \"react\";\nimport FileSaver from \"file-saver\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { type AuthDict } from \"matrix-js-sdk/src/matrix\";\nimport { type GeneratedSecretStorageKey } from \"matrix-js-sdk/src/crypto-api\";\nimport classNames from \"classnames\";\nimport CheckmarkIcon from \"@vector-im/compound-design-tokens/assets/web/icons/check\";\n\nimport { MatrixClientPeg } from \"../../../../MatrixClientPeg\";\nimport { _t, _td } from \"../../../../languageHandler\";\nimport Modal from \"../../../../Modal\";\nimport { copyNode } from \"../../../../utils/strings\";\nimport { SSOAuthEntry } from \"../../../../components/views/auth/InteractiveAuthEntryComponents\";\nimport PassphraseField from \"../../../../components/views/auth/PassphraseField\";\nimport StyledRadioButton from \"../../../../components/views/elements/StyledRadioButton\";\nimport AccessibleButton from \"../../../../components/views/elements/AccessibleButton\";\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\nimport InlineSpinner from \"../../../../components/views/elements/InlineSpinner\";\nimport { ModuleRunner } from \"../../../../modules/ModuleRunner\";\nimport type Field from \"../../../../components/views/elements/Field\";\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\nimport Spinner from \"../../../../components/views/elements/Spinner\";\nimport InteractiveAuthDialog from \"../../../../components/views/dialogs/InteractiveAuthDialog\";\nimport { type IValidationResult } from \"../../../../components/views/elements/Validation\";\nimport PassphraseConfirmField from \"../../../../components/views/auth/PassphraseConfirmField\";\nimport { initialiseDehydrationIfEnabled } from \"../../../../utils/device/dehydration\";\n\nenum SecureBackupSetupMethod {\n    Key = \"key\",\n    Passphrase = \"passphrase\",\n}\n\n// I made a mistake while converting this and it has to be fixed!\nenum Phase {\n    Loading = \"loading\",\n    LoadError = \"load_error\",\n    ChooseKeyPassphrase = \"choose_key_passphrase\",\n    Passphrase = \"passphrase\",\n    PassphraseConfirm = \"passphrase_confirm\",\n    ShowKey = \"show_key\",\n    Storing = \"storing\",\n    Stored = \"stored\",\n    ConfirmSkip = \"confirm_skip\",\n}\n\nconst PASSWORD_MIN_SCORE = 4; // So secure, many characters, much complex, wow, etc, etc.\n\ninterface IProps {\n    forceReset?: boolean;\n    onFinished(ok?: boolean): void;\n}\n\ninterface IState {\n    phase: Phase;\n    passPhrase: string;\n    passPhraseValid: boolean;\n    passPhraseConfirm: string;\n    copied: boolean;\n    downloaded: boolean;\n    setPassphrase: boolean;\n\n    passPhraseKeySelected: string;\n    error?: boolean;\n}\n\n/**\n * Walks the user through the process of creating a 4S passphrase and bootstrapping secret storage.\n *\n * If the user already has a key backup, follows a \"migration\" flow (aka \"Upgrade your encryption\") which\n * prompts the user to enter their backup decryption password (a Curve25519 private key, possibly derived\n * from a passphrase), and uses that as the (AES) 4S encryption key.\n *\n * @deprecated send the user to EncryptionUserSettingsTab instead\n */\nexport default class CreateSecretStorageDialog extends React.PureComponent<IProps, IState> {\n    public static defaultProps: Partial<IProps> = {\n        forceReset: false,\n    };\n    private recoveryKey?: GeneratedSecretStorageKey;\n    private recoveryKeyNode = createRef<HTMLElement>();\n    private passphraseField = createRef<Field>();\n\n    public constructor(props: IProps) {\n        super(props);\n\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\n        const phase = keyFromCustomisations ? Phase.Loading : Phase.ChooseKeyPassphrase;\n\n        this.state = {\n            phase,\n            passPhrase: \"\",\n            passPhraseValid: false,\n            passPhraseConfirm: \"\",\n            copied: false,\n            downloaded: false,\n            setPassphrase: false,\n            passPhraseKeySelected: SecureBackupSetupMethod.Key,\n        };\n    }\n\n    public componentDidMount(): void {\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\n        if (keyFromCustomisations) this.initExtension(keyFromCustomisations);\n    }\n\n    private initExtension(keyFromCustomisations: Uint8Array): void {\n        logger.log(\"CryptoSetupExtension: Created key via extension, jumping to bootstrap step\");\n        this.recoveryKey = {\n            privateKey: keyFromCustomisations,\n        };\n        this.bootstrapSecretStorage();\n    }\n\n    private onKeyPassphraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhraseKeySelected: e.target.value,\n        });\n    };\n\n    private onChooseKeyPassphraseFormSubmit = async (): Promise<void> => {\n        if (this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key) {\n            this.recoveryKey = await MatrixClientPeg.safeGet().getCrypto()!.createRecoveryKeyFromPassphrase();\n            this.setState({\n                copied: false,\n                downloaded: false,\n                setPassphrase: false,\n                phase: Phase.ShowKey,\n            });\n        } else {\n            this.setState({\n                copied: false,\n                downloaded: false,\n                phase: Phase.Passphrase,\n            });\n        }\n    };\n\n    private onCopyClick = (): void => {\n        const successful = copyNode(this.recoveryKeyNode.current);\n        if (successful) {\n            this.setState({\n                copied: true,\n            });\n        }\n    };\n\n    private onDownloadClick = (): void => {\n        if (!this.recoveryKey) return;\n        const blob = new Blob([this.recoveryKey.encodedPrivateKey!], {\n            type: \"text/plain;charset=us-ascii\",\n        });\n        FileSaver.saveAs(blob, \"security-key.txt\");\n\n        this.setState({\n            downloaded: true,\n        });\n    };\n\n    private doBootstrapUIAuth = async (makeRequest: (authData: AuthDict) => Promise<void>): Promise<void> => {\n        const dialogAesthetics = {\n            [SSOAuthEntry.PHASE_PREAUTH]: {\n                title: _t(\"auth|uia|sso_title\"),\n                body: _t(\"auth|uia|sso_preauth_body\"),\n                continueText: _t(\"auth|sso\"),\n                continueKind: \"primary\",\n            },\n            [SSOAuthEntry.PHASE_POSTAUTH]: {\n                title: _t(\"encryption|confirm_encryption_setup_title\"),\n                body: _t(\"encryption|confirm_encryption_setup_body\"),\n                continueText: _t(\"action|confirm\"),\n                continueKind: \"primary\",\n            },\n        };\n\n        const { finished } = Modal.createDialog(InteractiveAuthDialog, {\n            title: _t(\"encryption|bootstrap_title\"),\n            matrixClient: MatrixClientPeg.safeGet(),\n            makeRequest,\n            aestheticsForStagePhases: {\n                [SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,\n                [SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics,\n            },\n        });\n        const [confirmed] = await finished;\n        if (!confirmed) {\n            throw new Error(\"Cross-signing key upload auth canceled\");\n        }\n    };\n\n    private bootstrapSecretStorage = async (): Promise<void> => {\n        const cli = MatrixClientPeg.safeGet();\n        const crypto = cli.getCrypto()!;\n        const { forceReset } = this.props;\n\n        let backupInfo;\n        // First, unless we know we want to do a reset, we see if there is an existing key backup\n        if (!forceReset) {\n            try {\n                this.setState({ phase: Phase.Loading });\n                backupInfo = await crypto.getKeyBackupInfo();\n            } catch (e) {\n                logger.error(\"Error fetching backup data from server\", e);\n                this.setState({ phase: Phase.LoadError });\n                return;\n            }\n        }\n\n        this.setState({\n            phase: Phase.Storing,\n            error: undefined,\n        });\n\n        try {\n            if (forceReset) {\n                /* Resetting cross-signing requires secret storage to be reset\n                 * (otherwise it will try to store the cross-signing keys in the\n                 * old secret storage, and may prompt for the old key, which is\n                 * probably not available), and resetting key backup requires\n                 * cross-signing to be reset (so that the new backup can be\n                 * signed by the new cross-signing key).  So we reset secret\n                 * storage first, then cross-signing, then key backup.\n                 */\n                logger.log(\"Forcing secret storage reset\");\n                await crypto.bootstrapSecretStorage({\n                    createSecretStorageKey: async () => this.recoveryKey!,\n                    setupNewSecretStorage: true,\n                });\n                logger.log(\"Resetting key backup\");\n                await crypto.resetKeyBackup();\n            } else {\n                // For password authentication users after 2020-09, this cross-signing\n                // step will be a no-op since it is now setup during registration or login\n                // when needed. We should keep this here to cover other cases such as:\n                //   * Users with existing sessions prior to 2020-09 changes\n                //   * SSO authentication users which require interactive auth to upload\n                //     keys (and also happen to skip all post-authentication flows at the\n                //     moment via token login)\n                await crypto.bootstrapCrossSigning({\n                    authUploadDeviceSigningKeys: this.doBootstrapUIAuth,\n                });\n                await crypto.bootstrapSecretStorage({\n                    createSecretStorageKey: async () => this.recoveryKey!,\n                    setupNewKeyBackup: !backupInfo,\n                });\n            }\n            await initialiseDehydrationIfEnabled(cli, { createNewKey: true });\n\n            this.setState({\n                phase: Phase.Stored,\n            });\n        } catch (e) {\n            this.setState({ error: true });\n            logger.error(\"Error bootstrapping secret storage\", e);\n        }\n    };\n\n    private onCancel = (): void => {\n        this.props.onFinished(false);\n    };\n\n    private onLoadRetryClick = (): void => {\n        this.bootstrapSecretStorage();\n    };\n\n    private onShowKeyContinueClick = (): void => {\n        this.bootstrapSecretStorage();\n    };\n\n    private onCancelClick = (): void => {\n        this.setState({ phase: Phase.ConfirmSkip });\n    };\n\n    private onGoBackClick = (): void => {\n        this.setState({ phase: Phase.ChooseKeyPassphrase });\n    };\n\n    private onPassPhraseNextClick = async (e: React.FormEvent): Promise<void> => {\n        e.preventDefault();\n        if (!this.passphraseField.current) return; // unmounting\n\n        await this.passphraseField.current.validate({ allowEmpty: false });\n        if (!this.passphraseField.current.state.valid) {\n            this.passphraseField.current.focus();\n            this.passphraseField.current.validate({ allowEmpty: false, focused: true });\n            return;\n        }\n\n        this.setState({ phase: Phase.PassphraseConfirm });\n    };\n\n    private onPassPhraseConfirmNextClick = async (e: React.FormEvent): Promise<void> => {\n        e.preventDefault();\n\n        if (this.state.passPhrase !== this.state.passPhraseConfirm) return;\n\n        this.recoveryKey = await MatrixClientPeg.safeGet()\n            .getCrypto()!\n            .createRecoveryKeyFromPassphrase(this.state.passPhrase);\n        this.setState({\n            copied: false,\n            downloaded: false,\n            setPassphrase: true,\n            phase: Phase.ShowKey,\n        });\n    };\n\n    private onSetAgainClick = (): void => {\n        this.setState({\n            passPhrase: \"\",\n            passPhraseValid: false,\n            passPhraseConfirm: \"\",\n            phase: Phase.Passphrase,\n        });\n    };\n\n    private onPassPhraseValidate = (result: IValidationResult): void => {\n        this.setState({\n            passPhraseValid: !!result.valid,\n        });\n    };\n\n    private onPassPhraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhrase: e.target.value,\n        });\n    };\n\n    private onPassPhraseConfirmChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            passPhraseConfirm: e.target.value,\n        });\n    };\n\n    private renderOptionKey(): JSX.Element {\n        return (\n            <StyledRadioButton\n                key={SecureBackupSetupMethod.Key}\n                value={SecureBackupSetupMethod.Key}\n                name=\"keyPassphrase\"\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key}\n                onChange={this.onKeyPassphraseChange}\n                outlined\n            >\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_secureBackup\" />\n                    {_t(\"settings|key_backup|setup_secure_backup|generate_security_key_title\")}\n                </div>\n                <div>{_t(\"settings|key_backup|setup_secure_backup|generate_security_key_description\")}</div>\n            </StyledRadioButton>\n        );\n    }\n\n    private renderOptionPassphrase(): JSX.Element {\n        return (\n            <StyledRadioButton\n                key={SecureBackupSetupMethod.Passphrase}\n                value={SecureBackupSetupMethod.Passphrase}\n                name=\"keyPassphrase\"\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Passphrase}\n                onChange={this.onKeyPassphraseChange}\n                outlined\n            >\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_securePhrase\" />\n                    {_t(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                </div>\n                <div>{_t(\"settings|key_backup|setup_secure_backup|use_phrase_only_you_know\")}</div>\n            </StyledRadioButton>\n        );\n    }\n\n    private renderPhaseChooseKeyPassphrase(): JSX.Element {\n        const optionKey = this.renderOptionKey();\n        const optionPassphrase = this.renderOptionPassphrase();\n\n        return (\n            <form onSubmit={this.onChooseKeyPassphraseFormSubmit}>\n                <p className=\"mx_CreateSecretStorageDialog_centeredBody\">\n                    {_t(\"settings|key_backup|setup_secure_backup|description\")}\n                </p>\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer\" role=\"radiogroup\">\n                    {optionKey}\n                    {optionPassphrase}\n                </div>\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onChooseKeyPassphraseFormSubmit}\n                    onCancel={this.onCancelClick}\n                />\n            </form>\n        );\n    }\n\n    private renderPhasePassPhrase(): JSX.Element {\n        return (\n            <form onSubmit={this.onPassPhraseNextClick}>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_description\")}</p>\n\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\n                    <PassphraseField\n                        id=\"mx_passPhraseInput\"\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\n                        onChange={this.onPassPhraseChange}\n                        minScore={PASSWORD_MIN_SCORE}\n                        value={this.state.passPhrase}\n                        onValidate={this.onPassPhraseValidate}\n                        fieldRef={this.passphraseField}\n                        autoFocus={true}\n                        label={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                        labelEnterPassword={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\n                        labelStrongPassword={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\n                        labelAllowedButUnsafe={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\n                    />\n                </div>\n\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onPassPhraseNextClick}\n                    hasCancel={false}\n                    disabled={!this.state.passPhraseValid}\n                >\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\n                        {_t(\"action|cancel\")}\n                    </button>\n                </DialogButtons>\n            </form>\n        );\n    }\n\n    private renderPhasePassPhraseConfirm(): JSX.Element {\n        let matchText;\n        let changeText;\n        if (this.state.passPhraseConfirm === this.state.passPhrase) {\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_success\");\n            changeText = _t(\"settings|key_backup|setup_secure_backup|use_different_passphrase\");\n        } else if (!this.state.passPhrase.startsWith(this.state.passPhraseConfirm)) {\n            // only tell them they're wrong if they've actually gone wrong.\n            // Security conscious readers will note that if you left element-web unattended\n            // on this screen, this would make it easy for a malicious person to guess\n            // your passphrase one letter at a time, but they could get this faster by\n            // just opening the browser's developer tools and reading it.\n            // Note that not having typed anything at all will not hit this clause and\n            // fall through so empty box === no hint.\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\");\n            changeText = _t(\"settings|key_backup|setup_secure_backup|set_phrase_again\");\n        }\n\n        let passPhraseMatch: JSX.Element | undefined;\n        if (matchText) {\n            passPhraseMatch = (\n                <div>\n                    <div>{matchText}</div>\n                    <AccessibleButton kind=\"link\" onClick={this.onSetAgainClick}>\n                        {changeText}\n                    </AccessibleButton>\n                </div>\n            );\n        }\n        return (\n            <form onSubmit={this.onPassPhraseConfirmNextClick}>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_to_confirm\")}</p>\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\n                    <PassphraseConfirmField\n                        id=\"mx_passPhraseInput\"\n                        onChange={this.onPassPhraseConfirmChange}\n                        value={this.state.passPhraseConfirm}\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\n                        label={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\n                        labelRequired={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\n                        labelInvalid={_td(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\")}\n                        autoFocus={true}\n                        password={this.state.passPhrase}\n                    />\n                    <div className=\"mx_CreateSecretStorageDialog_passPhraseMatch\">{passPhraseMatch}</div>\n                </div>\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    onPrimaryButtonClick={this.onPassPhraseConfirmNextClick}\n                    hasCancel={false}\n                    disabled={this.state.passPhrase !== this.state.passPhraseConfirm}\n                >\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\n                        {_t(\"action|skip\")}\n                    </button>\n                </DialogButtons>\n            </form>\n        );\n    }\n\n    private renderPhaseShowKey(): JSX.Element {\n        let continueButton: JSX.Element;\n        if (this.state.phase === Phase.ShowKey) {\n            continueButton = (\n                <DialogButtons\n                    primaryButton={_t(\"action|continue\")}\n                    disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}\n                    onPrimaryButtonClick={this.onShowKeyContinueClick}\n                    hasCancel={false}\n                />\n            );\n        } else {\n            continueButton = (\n                <div className=\"mx_CreateSecretStorageDialog_continueSpinner\">\n                    <InlineSpinner />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|security_key_safety_reminder\")}</p>\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer\">\n                    <div className=\"mx_CreateSecretStorageDialog_recoveryKeyContainer\">\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKey\">\n                            <code ref={this.recoveryKeyNode}>{this.recoveryKey?.encodedPrivateKey}</code>\n                        </div>\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKeyButtons\">\n                            <AccessibleButton\n                                kind=\"primary\"\n                                className=\"mx_Dialog_primary\"\n                                onClick={this.onDownloadClick}\n                                disabled={this.state.phase === Phase.Storing}\n                            >\n                                {_t(\"action|download\")}\n                            </AccessibleButton>\n                            <span>\n                                {_t(\"settings|key_backup|setup_secure_backup|download_or_copy\", {\n                                    downloadButton: \"\",\n                                    copyButton: \"\",\n                                })}\n                            </span>\n                            <AccessibleButton\n                                kind=\"primary\"\n                                className=\"mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn\"\n                                onClick={this.onCopyClick}\n                                disabled={this.state.phase === Phase.Storing}\n                            >\n                                {this.state.copied ? _t(\"common|copied\") : _t(\"action|copy\")}\n                            </AccessibleButton>\n                        </div>\n                    </div>\n                </div>\n                {continueButton}\n            </div>\n        );\n    }\n\n    private renderBusyPhase(): JSX.Element {\n        return (\n            <div>\n                <Spinner />\n            </div>\n        );\n    }\n\n    private renderStoredPhase(): JSX.Element {\n        return (\n            <>\n                <p className=\"mx_Dialog_content\">\n                    {_t(\"settings|key_backup|setup_secure_backup|backup_setup_success_description\")}\n                </p>\n                <DialogButtons\n                    primaryButton={_t(\"action|done\")}\n                    onPrimaryButtonClick={() => this.props.onFinished(true)}\n                    hasCancel={false}\n                />\n            </>\n        );\n    }\n\n    private renderPhaseLoadError(): JSX.Element {\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|secret_storage_query_failure\")}</p>\n                <div className=\"mx_Dialog_buttons\">\n                    <DialogButtons\n                        primaryButton={_t(\"action|retry\")}\n                        onPrimaryButtonClick={this.onLoadRetryClick}\n                        onCancel={this.onCancel}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private renderPhaseSkipConfirm(): JSX.Element {\n        return (\n            <div>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|cancel_warning\")}</p>\n                <p>{_t(\"settings|key_backup|setup_secure_backup|settings_reminder\")}</p>\n                <DialogButtons\n                    primaryButton={_t(\"action|go_back\")}\n                    onPrimaryButtonClick={this.onGoBackClick}\n                    hasCancel={false}\n                >\n                    <button type=\"button\" className=\"danger\" onClick={this.onCancel}>\n                        {_t(\"action|cancel\")}\n                    </button>\n                </DialogButtons>\n            </div>\n        );\n    }\n\n    private titleForPhase(phase: Phase): string {\n        switch (phase) {\n            case Phase.ChooseKeyPassphrase:\n                return _t(\"encryption|set_up_toast_title\");\n            case Phase.Passphrase:\n                return _t(\"settings|key_backup|setup_secure_backup|title_set_phrase\");\n            case Phase.PassphraseConfirm:\n                return _t(\"settings|key_backup|setup_secure_backup|title_confirm_phrase\");\n            case Phase.ConfirmSkip:\n                return _t(\"common|are_you_sure\");\n            case Phase.ShowKey:\n                return _t(\"settings|key_backup|setup_secure_backup|title_save_key\");\n            case Phase.Storing:\n                return _t(\"encryption|bootstrap_title\");\n            case Phase.Stored:\n                return _t(\"settings|key_backup|setup_secure_backup|backup_setup_success_title\");\n            default:\n                return \"\";\n        }\n    }\n\n    private get topComponent(): React.ReactNode | null {\n        if (this.state.phase === Phase.Stored) {\n            return <CheckmarkIcon className=\"mx_Icon mx_Icon_circle-40 mx_Icon_accent mx_Icon_bg-accent-light\" />;\n        }\n\n        return null;\n    }\n\n    private get classNames(): string {\n        return classNames(\"mx_CreateSecretStorageDialog\", {\n            mx_SuccessDialog: this.state.phase === Phase.Stored,\n        });\n    }\n\n    public render(): React.ReactNode {\n        let content;\n        if (this.state.error) {\n            content = (\n                <div>\n                    <p>{_t(\"settings|key_backup|setup_secure_backup|unable_to_setup\")}</p>\n                    <div className=\"mx_Dialog_buttons\">\n                        <DialogButtons\n                            primaryButton={_t(\"action|retry\")}\n                            onPrimaryButtonClick={this.bootstrapSecretStorage}\n                            onCancel={this.onCancel}\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            switch (this.state.phase) {\n                case Phase.Loading:\n                    content = this.renderBusyPhase();\n                    break;\n                case Phase.LoadError:\n                    content = this.renderPhaseLoadError();\n                    break;\n                case Phase.ChooseKeyPassphrase:\n                    content = this.renderPhaseChooseKeyPassphrase();\n                    break;\n                case Phase.Passphrase:\n                    content = this.renderPhasePassPhrase();\n                    break;\n                case Phase.PassphraseConfirm:\n                    content = this.renderPhasePassPhraseConfirm();\n                    break;\n                case Phase.ShowKey:\n                    content = this.renderPhaseShowKey();\n                    break;\n                case Phase.Storing:\n                    content = this.renderBusyPhase();\n                    break;\n                case Phase.Stored:\n                    content = this.renderStoredPhase();\n                    break;\n                case Phase.ConfirmSkip:\n                    content = this.renderPhaseSkipConfirm();\n                    break;\n            }\n        }\n\n        let titleClass: string | string[] | undefined;\n        switch (this.state.phase) {\n            case Phase.Passphrase:\n            case Phase.PassphraseConfirm:\n                titleClass = [\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\n                    \"mx_CreateSecretStorageDialog_securePhraseTitle\",\n                ];\n                break;\n            case Phase.ShowKey:\n                titleClass = [\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\n                    \"mx_CreateSecretStorageDialog_secureBackupTitle\",\n                ];\n                break;\n            case Phase.ChooseKeyPassphrase:\n                titleClass = \"mx_CreateSecretStorageDialog_centeredTitle\";\n                break;\n        }\n\n        return (\n            <BaseDialog\n                className={this.classNames}\n                onFinished={this.props.onFinished}\n                top={this.topComponent}\n                title={this.titleForPhase(this.state.phase)}\n                titleClass={titleClass}\n                hasCancel={false}\n                fixedWidth={false}\n            >\n                <div>{content}</div>\n            </BaseDialog>\n        );\n    }\n}\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type ComponentProps, PureComponent, type Ref } from \"react\";\n\nimport Field, { type IInputProps } from \"../elements/Field\";\nimport withValidation, { type IFieldState, type IValidationResult } from \"../elements/Validation\";\nimport { _t, _td, type TranslationKey } from \"../../../languageHandler\";\n\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"label\" | \"element\"> {\n    id?: string;\n    fieldRef?: Ref<Field>;\n    autoComplete?: string;\n    value: string;\n    password: string; // The password we're confirming\n\n    label: TranslationKey;\n    labelRequired: TranslationKey;\n    labelInvalid: TranslationKey;\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\n    onChange(ev: React.FormEvent<HTMLElement>): void;\n    onValidate?(result: IValidationResult): void;\n}\n\nclass PassphraseConfirmField extends PureComponent<IProps> {\n    public static defaultProps = {\n        label: _td(\"auth|change_password_confirm_label\"),\n        labelRequired: _td(\"auth|change_password_confirm_label\"),\n        labelInvalid: _td(\"auth|change_password_confirm_invalid\"),\n    };\n\n    private validate = withValidation({\n        rules: [\n            {\n                key: \"required\",\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\n                invalid: () => _t(this.props.labelRequired),\n            },\n            {\n                key: \"match\",\n                test: ({ value }) => !value || value === this.props.password,\n                invalid: () => _t(this.props.labelInvalid),\n            },\n        ],\n    });\n\n    private onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\n        const result = await this.validate(fieldState);\n        if (this.props.onValidate) {\n            this.props.onValidate(result);\n        }\n\n        return result;\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Field\n                id={this.props.id}\n                ref={this.props.fieldRef}\n                type=\"password\"\n                label={_t(this.props.label)}\n                autoComplete={this.props.autoComplete}\n                value={this.props.value}\n                onChange={this.props.onChange}\n                onValidate={this.onValidate}\n                autoFocus={this.props.autoFocus}\n                tooltipAlignment={this.props.tooltipAlignment}\n            />\n        );\n    }\n}\n\nexport default PassphraseConfirmField;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type ComponentProps, PureComponent, type Ref } from \"react\";\nimport classNames from \"classnames\";\n\nimport type { ZxcvbnResult } from \"@zxcvbn-ts/core\";\nimport SdkConfig from \"../../../SdkConfig\";\nimport withValidation, { type IFieldState, type IValidationResult } from \"../elements/Validation\";\nimport { _t, _td, type TranslationKey } from \"../../../languageHandler\";\nimport Field, { type IInputProps } from \"../elements/Field\";\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\n\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"element\"> {\n    autoFocus?: boolean;\n    id?: string;\n    className?: string;\n    minScore: 0 | 1 | 2 | 3 | 4;\n    value: string;\n    fieldRef?: Ref<Field>;\n    // Additional strings such as a username used to catch bad passwords\n    userInputs?: string[];\n\n    label: TranslationKey;\n    labelEnterPassword: TranslationKey;\n    labelStrongPassword: TranslationKey;\n    labelAllowedButUnsafe: TranslationKey;\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\n\n    onChange(ev: React.FormEvent<HTMLElement>): void;\n    onValidate?(result: IValidationResult): void;\n}\n\nclass PassphraseField extends PureComponent<IProps> {\n    public static defaultProps = {\n        label: _td(\"common|password\"),\n        labelEnterPassword: _td(\"auth|password_field_label\"),\n        labelStrongPassword: _td(\"auth|password_field_strong_label\"),\n        labelAllowedButUnsafe: _td(\"auth|password_field_weak_label\"),\n    };\n\n    public readonly validate = withValidation<this, ZxcvbnResult | null>({\n        description: function (complexity) {\n            const score = complexity ? complexity.score : 0;\n            return <progress className=\"mx_PassphraseField_progress\" max={4} value={score} />;\n        },\n        deriveData: async ({ value }): Promise<ZxcvbnResult | null> => {\n            if (!value) return null;\n            const { scorePassword } = await import(\"../../../utils/PasswordScorer\");\n            return scorePassword(MatrixClientPeg.get(), value, this.props.userInputs);\n        },\n        rules: [\n            {\n                key: \"required\",\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\n                invalid: () => _t(this.props.labelEnterPassword),\n            },\n            {\n                key: \"complexity\",\n                test: async function ({ value }, complexity): Promise<boolean> {\n                    if (!value || !complexity) {\n                        return false;\n                    }\n                    const safe = complexity.score >= this.props.minScore;\n                    const allowUnsafe = SdkConfig.get(\"dangerously_allow_unsafe_and_insecure_passwords\");\n                    return allowUnsafe || safe;\n                },\n                valid: function (complexity) {\n                    // Unsafe passwords that are valid are only possible through a\n                    // configuration flag. We'll print some helper text to signal\n                    // to the user that their password is allowed, but unsafe.\n                    if (complexity && complexity.score >= this.props.minScore) {\n                        return _t(this.props.labelStrongPassword);\n                    }\n                    return _t(this.props.labelAllowedButUnsafe);\n                },\n                invalid: function (complexity) {\n                    if (!complexity) {\n                        return null;\n                    }\n                    const { feedback } = complexity;\n                    return feedback.warning || feedback.suggestions[0] || _t(\"auth|password_field_keep_going_prompt\");\n                },\n            },\n        ],\n        memoize: true,\n    });\n\n    public onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\n        const result = await this.validate(fieldState);\n        if (this.props.onValidate) {\n            this.props.onValidate(result);\n        }\n        return result;\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Field\n                id={this.props.id}\n                autoFocus={this.props.autoFocus}\n                className={classNames(\"mx_PassphraseField\", this.props.className)}\n                ref={this.props.fieldRef}\n                type=\"password\"\n                autoComplete=\"new-password\"\n                label={_t(this.props.label)}\n                value={this.props.value}\n                onChange={this.props.onChange}\n                onValidate={this.onValidate}\n                tooltipAlignment={this.props.tooltipAlignment}\n            />\n        );\n    }\n}\n\nexport default PassphraseField;\n"],"names":["b","autoBom","console","warn","test","type","Blob","XMLHttpRequest","open","responseType","onload","response","onerror","error","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","self","g","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","URL","webkitURL","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","i","HTMLElement","safari","FileReader","onloadend","result","replace","readAsDataURL","module","exports","SecureBackupSetupMethod","Phase","CreateSecretStorageDialog","React","constructor","props","super","_defineProperty","createRef","e","this","setState","passPhraseKeySelected","value","async","state","Key","recoveryKey","MatrixClientPeg","safeGet","getCrypto","createRecoveryKeyFromPassphrase","copied","downloaded","setPassphrase","phase","ShowKey","Passphrase","copyNode","recoveryKeyNode","current","blob","encodedPrivateKey","FileSaver","dialogAesthetics","SSOAuthEntry","PHASE_PREAUTH","_t","continueText","continueKind","PHASE_POSTAUTH","finished","Modal","createDialog","InteractiveAuthDialog","matrixClient","makeRequest","aestheticsForStagePhases","LOGIN_TYPE","UNSTABLE_LOGIN_TYPE","confirmed","Error","cli","crypto","forceReset","backupInfo","Loading","getKeyBackupInfo","logger","LoadError","Storing","undefined","log","bootstrapSecretStorage","createSecretStorageKey","setupNewSecretStorage","resetKeyBackup","bootstrapCrossSigning","authUploadDeviceSigningKeys","doBootstrapUIAuth","setupNewKeyBackup","initialiseDehydrationIfEnabled","createNewKey","Stored","onFinished","ConfirmSkip","ChooseKeyPassphrase","preventDefault","passphraseField","validate","allowEmpty","valid","focus","focused","PassphraseConfirm","passPhrase","passPhraseConfirm","passPhraseValid","ModuleRunner","instance","extensions","cryptoSetup","componentDidMount","keyFromCustomisations","initExtension","privateKey","renderOptionKey","StyledRadioButton","key","checked","onChange","onKeyPassphraseChange","outlined","className","renderOptionPassphrase","renderPhaseChooseKeyPassphrase","optionKey","optionPassphrase","onSubmit","onChooseKeyPassphraseFormSubmit","role","DialogButtons","primaryButton","onPrimaryButtonClick","onCancel","onCancelClick","renderPhasePassPhrase","onPassPhraseNextClick","PassphraseField","id","onPassPhraseChange","minScore","onValidate","onPassPhraseValidate","fieldRef","autoFocus","label","_td","labelEnterPassword","labelStrongPassword","labelAllowedButUnsafe","hasCancel","disabled","onClick","renderPhasePassPhraseConfirm","matchText","changeText","passPhraseMatch","startsWith","AccessibleButton","kind","onSetAgainClick","onPassPhraseConfirmNextClick","PassphraseConfirmField","onPassPhraseConfirmChange","labelRequired","labelInvalid","password","renderPhaseShowKey","_this$recoveryKey","continueButton","onShowKeyContinueClick","InlineSpinner","ref","onDownloadClick","downloadButton","copyButton","onCopyClick","renderBusyPhase","Spinner","renderStoredPhase","renderPhaseLoadError","onLoadRetryClick","renderPhaseSkipConfirm","onGoBackClick","titleForPhase","topComponent","CheckmarkIcon","classNames","mx_SuccessDialog","render","content","titleClass","BaseDialog","top","fixedWidth","PureComponent","args","withValidation","rules","invalid","fieldState","Field","autoComplete","tooltipAlignment","description","complexity","score","max","deriveData","scorePassword","get","userInputs","safe","SdkConfig","feedback","warning","suggestions","memoize"],"sourceRoot":""}