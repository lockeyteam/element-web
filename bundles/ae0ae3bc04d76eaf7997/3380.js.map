{"version":3,"file":"bundles/ae0ae3bc04d76eaf7997/3380.js","mappings":"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","sources":["webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index-wasm-esm.mjs","webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js"],"sourcesContent":["// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entry point for ESM environments which support the ES Module Integration Proposal for WebAssembly [1].\n *\n * [1]: https://github.com/webassembly/esm-integration\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    /** @type {typeof import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm.d.ts\")} */\n    // @ts-expect-error TSC can't find the definitions file, for some reason.\n    const wasm = await import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\");\n    bindings.__wbg_set_wasm(wasm);\n    wasm.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_62(arg0, arg1, arg2) {\n    const ret = wasm.closure43_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_65(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0def4b7acf9443a4(arg0, arg1);\n}\n\nfunction __wbg_adapter_68(arg0, arg1, arg2) {\n    wasm.closure740_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_71(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1d83a6fb10cd0388(arg0, arg1);\n}\n\nfunction __wbg_adapter_74(arg0, arg1, arg2) {\n    wasm.closure433_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_820(arg0, arg1, arg2, arg3) {\n    wasm.closure445_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The type of a {@link ProcessedToDeviceEvent}.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const ProcessedToDeviceEventType = Object.freeze({\n    /**\n     * A successfully-decrypted encrypted to-device message.\n     */\n    Decrypted: 0, \"0\": \"Decrypted\",\n    /**\n     * An encrypted to-device message which could not be decrypted.\n     */\n    UnableToDecrypt: 1, \"1\": \"UnableToDecrypt\",\n    /**\n     * An unencrypted to-device message (sent in clear).\n     */\n    PlainText: 2, \"2\": \"PlainText\",\n    /**\n     * An invalid to-device message that was ignored because it is missing some\n     * required information to be processed (like no event `type` for\n     * example)\n     */\n    Invalid: 3, \"3\": \"Invalid\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Base64EncodedPkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_base64encodedpkmessage_free(ptr >>> 0, 1));\n/**\n * The base64-encoded variant of a {@link PkMessage}.\n *\n * This can be useful if the encrypted message should be put into JSON.\n */\nexport class Base64EncodedPkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Base64EncodedPkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        Base64EncodedPkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Base64EncodedPkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_base64encodedpkmessage_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @returns {string}\n     */\n    get ciphertext() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ciphertext(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @param {string} arg0\n     */\n    set ciphertext(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @returns {string}\n     */\n    get mac() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_mac(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @param {string} arg0\n     */\n    set mac(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @returns {string}\n     */\n    get ephemeralKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @param {string} arg0\n     */\n    set ephemeralKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Creates a new base64-encoded encrypted message from its parts.\n     * @param {string} ciphertext\n     * @param {string} mac\n     * @param {string} ephemeral_key\n     */\n    constructor(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.base64encodedpkmessage_new(ptr0, len0, ptr1, len1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        Base64EncodedPkMessageFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Curve25519SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519secretkey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 secret key.\n */\nexport class Curve25519SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519secretkey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random Curve25519 secret key.\n     * @returns {Curve25519SecretKey}\n     */\n    static new() {\n        const ret = wasm.curve25519secretkey_new();\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a base64-encoded representation of\n     * the key.\n     * @param {string} string\n     * @returns {Curve25519SecretKey}\n     */\n    static fromBase64(string) {\n        const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n    /**\n     * Encodes the secret key into a base64 string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519secretkey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Converts the secret key into a raw byte vector.\n     * @returns {Uint8Array}\n     */\n    toUint8Array() {\n        const ret = wasm.curve25519secretkey_toUint8Array(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a raw byte slice.\n     * @param {Uint8Array} slice\n     * @returns {Curve25519SecretKey}\n     */\n    static fromUint8Array(slice) {\n        const ptr0 = passArray8ToWasm0(slice, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromUint8Array(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptedToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an encrypted to-device event, after it has been decrypted.\n */\nexport class DecryptedToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The decrypted event, as if it had been sent in the clear, encoded as\n     * JSON.\n     *\n     * Typically contains properties `type`, `sender` and `content`.\n     *\n     * (For room keys or secrets, some part of the content might have been\n     * zeroized).\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_decryptedtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption information for the event.\n     * @returns {ToDeviceEncryptionInfo}\n     */\n    get encryptionInfo() {\n        const ret = wasm.__wbg_get_decryptedtodeviceevent_encryptionInfo(this.__wbg_ptr);\n        return ToDeviceEncryptionInfo.__wrap(ret);\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.Decrypted} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.decryptedtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded object.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded object. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how a room event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.__wbg_get_encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @param {UserId} arg0\n     */\n    set sender(arg0) {\n        _assertClass(arg0, UserId);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptioninfo_sender(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the device that sent us the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.__wbg_get_encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @param {DeviceId | null} [arg0]\n     */\n    set senderDevice(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_encryptioninfo_senderDevice(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that created the\n     * megolm decryption key originally.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that created the\n     * megolm decryption key originally.\n     * @param {string} arg0\n     */\n    set senderCurve25519Key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.__wbg_get_encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @param {string | null} [arg0]\n     */\n    set senderClaimedEd25519Key(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst InvalidToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_invalidtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an invalid to-device event that was ignored (because it is\n * missing some mandatory fields, for example).\n */\nexport class InvalidToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InvalidToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        InvalidToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InvalidToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_invalidtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The original message as received from sync, encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_invalidtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.Invalid} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.invalidtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of values, each of which can be any of:\n     *   * {@link DecryptedToDeviceEvent}\n     *   * {@link PlainTextToDeviceEvent}\n     *   * {@link UTDToDeviceEvent}\n     *   * {@link InvalidToDeviceEvent}\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PkDecryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkdecryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key decryption instance.\n *\n * This implements the decryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkEncryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkDecryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkDecryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkDecryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkDecryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkdecryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkDecryption` instance with a newly generated key pair.\n     */\n    constructor() {\n        const ret = wasm.pkdecryption_new();\n        this.__wbg_ptr = ret >>> 0;\n        PkDecryptionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Creates a `PkDecryption` instance from a secret key.\n     * @param {Curve25519SecretKey} key\n     * @returns {PkDecryption}\n     */\n    static fromKey(key) {\n        _assertClass(key, Curve25519SecretKey);\n        const ret = wasm.pkdecryption_fromKey(key.__wbg_ptr);\n        return PkDecryption.__wrap(ret);\n    }\n    /**\n     * Returns the secret key associated with this `PkDecryption` instance.\n     * @returns {Curve25519SecretKey}\n     */\n    secretKey() {\n        const ret = wasm.pkdecryption_secretKey(this.__wbg_ptr);\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Returns the public key associated with this decryption instance.\n     *\n     * This can be used to construct a {@link PkEncryption} object to encrypt a\n     * message for this `PkDecryption` object.\n     * @returns {Curve25519PublicKey}\n     */\n    publicKey() {\n        const ret = wasm.pkdecryption_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Decrypts an encrypted message and returns the plaintext as a UTF-8\n     * string.\n     * @param {PkMessage} message\n     * @returns {string}\n     */\n    decryptString(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            _assertClass(message, PkMessage);\n            const ret = wasm.pkdecryption_decryptString(this.__wbg_ptr, message.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypts an encrypted message and returns the raw `Uint8Array`.\n     * @param {PkMessage} message\n     * @returns {Uint8Array}\n     */\n    decrypt(message) {\n        _assertClass(message, PkMessage);\n        const ret = wasm.pkdecryption_decrypt(this.__wbg_ptr, message.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst PkEncryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkencryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key encryption instance.\n *\n * This implements the encryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkDecryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkEncryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkEncryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkEncryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkencryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkEncryption` instance from a public key.\n     * @param {Curve25519PublicKey} public_key\n     * @returns {PkEncryption}\n     */\n    static fromKey(public_key) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ret = wasm.pkencryption_fromKey(public_key.__wbg_ptr);\n        return PkEncryption.__wrap(ret);\n    }\n    /**\n     * Encrypts a byte message and returns an encrypted {@link PkMessage}.\n     * @param {Uint8Array} message\n     * @returns {PkMessage}\n     */\n    encrypt(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Encrypts a string message and returns an encrypted {@link PkMessage}.\n     * @param {string} message\n     * @returns {PkMessage}\n     */\n    encryptString(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n}\n\nconst PkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkmessage_free(ptr >>> 0, 1));\n/**\n * A class representing an encrypted message using {@link PkEncryption}.\n */\nexport class PkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        PkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkmessage_free(ptr, 0);\n    }\n    /**\n     * Returns the raw ciphertext as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    ciphertext() {\n        const ret = wasm.pkmessage_ciphertext(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the raw message authentication code (MAC) as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    mac() {\n        const ret = wasm.pkmessage_mac(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the ephemeral public key used during encryption.\n     * @returns {Curve25519PublicKey}\n     */\n    ephemeralKey() {\n        const ret = wasm.pkmessage_ephemeralKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from its parts: ciphertext, MAC, and ephemeral\n     * key.\n     * @param {Uint8Array} ciphertext\n     * @param {Uint8Array} mac\n     * @param {Curve25519PublicKey} ephemeral_key\n     * @returns {PkMessage}\n     */\n    static fromParts(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(ephemeral_key, Curve25519PublicKey);\n        const ret = wasm.pkmessage_fromParts(ptr0, len0, ptr1, len1, ephemeral_key.__wbg_ptr);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from a base64-encoded representation.\n     * @param {Base64EncodedPkMessage} message\n     * @returns {PkMessage}\n     */\n    static fromBase64(message) {\n        _assertClass(message, Base64EncodedPkMessage);\n        const ret = wasm.pkmessage_fromBase64(message.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return PkMessage.__wrap(ret[0]);\n    }\n    /**\n     * Converts the `PkMessage` into a base64-encoded representation.\n     * @returns {Base64EncodedPkMessage}\n     */\n    toBase64() {\n        const ret = wasm.pkmessage_toBase64(this.__wbg_ptr);\n        return Base64EncodedPkMessage.__wrap(ret);\n    }\n}\n\nconst PlainTextToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_plaintexttodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents a to-device event sent in the clear.\n */\nexport class PlainTextToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PlainTextToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        PlainTextToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PlainTextToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plaintexttodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The to-device message, containing `type`, `sender` and `content` fields,\n     * encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_plaintexttodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.PlainText} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.plaintexttodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceEncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todeviceencryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how a to-device message was decrypted.\n */\nexport class ToDeviceEncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceEncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceEncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceEncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todeviceencryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that encrypted\n     * the message.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_todeviceencryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that encrypted\n     * the message.\n     * @param {string} arg0\n     */\n    set senderCurve25519Key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.__wbg_get_todeviceencryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @param {UserId} arg0\n     */\n    set sender(arg0) {\n        _assertClass(arg0, UserId);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_todeviceencryptioninfo_sender(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the device that sent us the to-device message.\n     *\n     * Could be `undefined` in the case where the to-device message sender\n     * checks are delayed. There is no delay for to-device messages other\n     * than `m.room_key`, so this will always be truthy for other\n     * message types (the decryption would fail if the sender device keys\n     * cannot be found).\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.__wbg_get_todeviceencryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the to-device message.\n     *\n     * Could be `undefined` in the case where the to-device message sender\n     * checks are delayed. There is no delay for to-device messages other\n     * than `m.room_key`, so this will always be truthy for other\n     * message types (the decryption would fail if the sender device keys\n     * cannot be found).\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @param {DeviceId | null} [arg0]\n     */\n    set senderDevice(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_todeviceencryptioninfo_senderDevice(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Returns whether the sender device is in a verified state.\n     * This reflects the state at the time of decryption.\n     * @returns {boolean}\n     */\n    isSenderVerified() {\n        const ret = wasm.todeviceencryptioninfo_isSenderVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UTDToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_utdtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an encrypted to-device event that could not be decrypted.\n */\nexport class UTDToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UTDToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        UTDToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UTDToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_utdtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The original message (of type `m.room.encrypted`) that failed to be\n     * decrypted, encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_utdtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.UnableToDecrypt} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.utdtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_883d9432f9188ef2(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_9338901b80183e0f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_7d852dd9f194d43e(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_55a8d08e0491e17a() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_f2afc3766d4545cf() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_f450db7eeb71163f() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_26fc2e6856d8567a(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_cfd8f6868bdaed9b(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_c46c11d3dbe1b030() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_613cb921d67a4f26() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_ea1a2987dff7759e() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_873ac48adc772309() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_fcfd513cf4581834() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_e566459f7161f82f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_574e78ad8b13b65f(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_3cb59063b29f58c1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_9f9ca054ed65663b(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_decryptedtodeviceevent_new(arg0) {\n    const ret = DecryptedToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_3f08ae00cd288224() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_200677093b4cf756() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_2ecf7cf20900b3a2() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c8a90a7ed73e84ce(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_31166d6a0878abd2(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_ff4ddaabdfc5dbb3() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_from_2a5d3e218e67aa85(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_b11d8835dc4be0e8() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_304e868beec2021f() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_d1e60c13c0073374() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_e6903c610babcd42() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_3d90134a348e46b3() { return handleError(function (arg0, arg1) {\n    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));\n}, arguments) };\n\nexport function __wbg_getRandomValues_b8f5dbd5f3995a9e() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_46267b1c24877e30(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_8da03f81f6a1111e() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_93e54e8e166fbcab() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_e00ca5fff206ee3e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_b1f49280282046f8() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_f6b47b0dc333fd2f() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_10396dc5295175f6(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_info_3daf2e093e091b66(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_f3469ce2244d2430(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_935168b8f4b49db3(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_invalidtodeviceevent_new(arg0) {\n    const ret = InvalidToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_c3c26b4103ad5aaf(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_29fefecef430db96() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_238152a0aedbb6e7(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_1872d19f5bcf83c6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_5c5d919204d42400(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_a61aeb35a24c1329(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_f2d27098bfd843e7(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_820(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_31a97dac4f10fab7(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_7a91e41fe43b3c92(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a239edaa1dc2968f(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_6d34787141015158(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_ee8e1b95dea9d37c(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_baedba94f03976fd() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_905d3e251edff8a2(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_807e54c39636c349() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_9bb1ab04a7012aaf(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_21878d46d25b64b6() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_e8337811e52861c6(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_1adef2266972fb45() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_238e247d18bde2cd() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_f4b061aa6d804b93() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_88b1390d99a7c691() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_e0c0b2993eb596e1() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_def2e24ef1252aff() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_plaintexttodeviceevent_new(arg0) {\n    const ret = PlainTextToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_dc0fbacc7c1c06f7(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_066faa31a6a88f5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ac0988aba3254290() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_4013cfdf4f22afb0(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_60cc747a6bc5215a() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_f29afabdf2c05826() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_6775f73144c2ef27(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_setonabort_3bf4db6614fa98e9(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_aebf64bd39f1eca8(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_4d19df0dadb7c4d4(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_b0d9d723b8fddbbb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_d7e3056cc6e56085(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_afa464ee777a396d(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_6ee07fa49ee1e3a5(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_dd24c422aa05df89(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_0a62d9d79a2a1ede(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_babc423936946a37() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d6d07c3c9963c49e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_e713aa7b07ccaedd(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_update_acd72607f506872a() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_utdtodeviceevent_new(arg0) {\n    const ret = UTDToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_68c4e9a54bb7fd5e() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_53465c57fc8cd691(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_a70a33e5bbc6d6db(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c01dfd4722a88165(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_2f770ebe9dde717f(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbg_warn_4ca3906c248c47c4(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbindgen_array_new() {\n    const ret = [];\n    return ret;\n};\n\nexport function __wbindgen_array_push(arg0, arg1) {\n    arg0.push(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1111(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 44, __wbg_adapter_62);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2291(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 424, __wbg_adapter_65);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5405(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 424, __wbg_adapter_68);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6870(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 430, __wbg_adapter_71);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6872(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 430, __wbg_adapter_74);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n"],"names":["Proxy","get","Error","modPromise","async","initAsync","wasm","__wbindgen_start","loadModuleAsync","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_4","handleError","f","args","apply","this","e","__wbindgen_exn_store","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","isLikeNone","x","getArrayU8FromWasm0","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_6","dtor","a","b","makeMutClosure","arg0","arg1","cnt","real","original","makeClosure","debugString","type","description","name","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","passArray8ToWasm0","takeFromExternrefTable0","value","__externref_table_dealloc","_assertClass","instance","klass","passArrayJsValueToWasm0","array","add","setUint32","getArrayJsValueFromWasm0","result","push","getUint32","__externref_drop_slice","cachedUint16ArrayMemory0","getArrayU16FromWasm0","Uint16Array","getVersions","ret","Versions","__wrap","__wbg_adapter_62","arg2","closure43_externref_shim_multivalue_shim","__wbg_adapter_65","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0def4b7acf9443a4","__wbg_adapter_68","closure740_externref_shim","__wbg_adapter_71","_dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1d83a6fb10cd0388","__wbg_adapter_74","closure433_externref_shim","DecryptionErrorCode","Object","freeze","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","EncryptionAlgorithm","Ed25519","Curve25519","Unknown","OlmV1Curve25519AesSha2","MegolmV1AesSha2","HistoryVisibility","Invited","Joined","Shared","WorldReadable","LocalTrust","Verified","BlackListed","Ignored","Unset","LoggerLevel","Trace","Debug","Info","Warn","ProcessedToDeviceEventType","Decrypted","PlainText","Invalid","QrCodeMode","Login","Reciprocate","QrState","Created","Scanned","Confirmed","Reciprocated","Done","Cancelled","ShieldColor","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","Red","Grey","None","ShieldStateCode","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","TrustRequirement","Missing","ValidButNotTrusted","ValidAndTrusted","Untrusted","CrossSignedOrLegacy","CrossSigned","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","VerificationRequestPhase","Requested","Ready","Transitioned","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","__wbg_attachment_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","__wbg_ptr","__destroy_into_raw","free","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","backupdecryptionkey_fromBase64","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","ptr4","len4","__wbindgen_free","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","v1","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","__wbg_base64encodedpkmessage_free","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","allDevices","collectstrategy_allDevices","errorOnUnverifiedUserProblem","collectstrategy_errorOnUnverifiedUserProblem","identityBasedStrategy","collectstrategy_identityBasedStrategy","onlyTrustedDevices","collectstrategy_onlyTrustedDevices","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","__wbg_curve25519secretkey_free","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptedToDeviceEventFinalization","__wbg_decryptedtodeviceevent_free","DecryptedToDeviceEvent","rawEvent","__wbg_get_decryptedtodeviceevent_rawEvent","encryptionInfo","__wbg_get_decryptedtodeviceevent_encryptionInfo","ToDeviceEncryptionInfo","decryptedtodeviceevent_type","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","dehydrateddevice_keysForUpload","DehydratedDeviceKeyFinalization","__wbg_dehydrateddevicekey_free","dehydrateddevicekey_createRandomKey","createKeyFromArray","dehydrateddevicekey_createKeyFromArray","dehydrateddevicekey_toBase64","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","getDehydratedDeviceKey","dehydrateddevices_getDehydratedDeviceKey","saveDehydratedDeviceKey","dehydrateddevices_saveDehydratedDeviceKey","deleteDehydratedDeviceKey","dehydrateddevices_deleteDehydratedDeviceKey","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","__wbg_encryptedattachment_free","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","__wbg_get_encryptioninfo_sender","__wbg_set_encryptioninfo_sender","__wbg_get_encryptioninfo_senderDevice","__wbg_set_encryptioninfo_senderDevice","__wbg_get_encryptioninfo_senderCurve25519Key","__wbg_get_encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","encrypt","deferred2_0","deferred2_1","establishedecies_encrypt","decrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","__wbg_get_inboundcreationresult_message","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","InvalidToDeviceEventFinalization","__wbg_invalidtodeviceevent_free","InvalidToDeviceEvent","__wbg_get_invalidtodeviceevent_rawEvent","invalidtodeviceevent_type","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","__wbg_get_keysclaimrequest_id","__wbg_get_keysclaimrequest_body","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","__wbg_get_keysqueryrequest_id","__wbg_get_keysqueryrequest_body","keysqueryrequest_new","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","__wbg_get_keysuploadrequest_id","__wbg_get_keysuploadrequest_body","keysuploadrequest_new","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","__wbg_get_megolmdecryptionerror_description","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","pickle_key","store_handle","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","decryptRoomEvent","decryption_settings","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","__wbg_get_outboundcreationresult_initial_message","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","__wbg_get_pickledinboundgroupsession_pickle","__wbg_get_pickledinboundgroupsession_senderKey","senderSigningKey","__wbg_get_pickledinboundgroupsession_senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","__wbg_get_pickledsession_pickle","__wbg_get_pickledsession_senderKey","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","__wbg_pkdecryption_free","__wbg_pkencryption_free","__wbg_pkmessage_free","PlainTextToDeviceEventFinalization","__wbg_plaintexttodeviceevent_free","PlainTextToDeviceEvent","__wbg_get_plaintexttodeviceevent_rawEvent","plaintexttodeviceevent_type","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","roomid_toString","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","__wbg_get_roommessagerequest_id","__wbg_get_roommessagerequest_room_id","txn_id","__wbg_get_roommessagerequest_txn_id","__wbg_get_roommessagerequest_event_type","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","__wbg_get_signatureuploadrequest_id","__wbg_get_signatureuploadrequest_body","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","ToDeviceEncryptionInfoFinalization","__wbg_todeviceencryptioninfo_free","__wbg_get_todeviceencryptioninfo_senderCurve25519Key","__wbg_get_todeviceencryptioninfo_sender","__wbg_set_todeviceencryptioninfo_sender","__wbg_get_todeviceencryptioninfo_senderDevice","__wbg_set_todeviceencryptioninfo_senderDevice","isSenderVerified","todeviceencryptioninfo_isSenderVerified","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","__wbg_get_todevicerequest_id","__wbg_get_todevicerequest_event_type","__wbg_get_todevicerequest_txn_id","__wbg_get_todevicerequest_body","todevicerequest_new","todevicerequest_type","TracingFinalization","__wbg_tracing_free","Tracing","isAvailable","tracing_isAvailable","min_level","tracing_new","minLevel","tracing_set_minLevel","turnOn","tracing_turnOn","turnOff","tracing_turnOff","UTDToDeviceEventFinalization","__wbg_utdtodeviceevent_free","UTDToDeviceEvent","__wbg_get_utdtodeviceevent_rawEvent","utdtodeviceevent_type","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","__wbg_get_uploadsigningkeysrequest_body","uploadsigningkeysrequest_new","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","userid_toString","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","__wbg_get_versions_vodozemac","matrix_sdk_crypto","__wbg_get_versions_matrix_sdk_crypto","git_sha","__wbg_get_versions_git_sha","git_description","__wbg_get_versions_git_description","__wbg_String_8f0eb39a4a4c2f66","String","setInt32","__wbg_Window_b0044ac7db258535","Window","__wbg_WorkerGlobalScope_b74cefefc62a37da","WorkerGlobalScope","__wbg_add_883d9432f9188ef2","__wbg_add_9338901b80183e0f","arguments","__wbg_at_7d852dd9f194d43e","at","__wbg_backupkeys_new","__wbg_bound_55a8d08e0491e17a","IDBKeyRange","bound","__wbg_bound_f2afc3766d4545cf","arg3","__wbg_buffer_609cc3eee51ed158","__wbg_call_672a4d21634d4a24","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_clearTimeout_5a54f8841c30079a","clearTimeout","__wbg_clear_f450db7eeb71163f","__wbg_close_26fc2e6856d8567a","__wbg_code_cfd8f6868bdaed9b","__wbg_continue_c46c11d3dbe1b030","continue","__wbg_count_613cb921d67a4f26","__wbg_count_ea1a2987dff7759e","__wbg_createIndex_873ac48adc772309","createIndex","__wbg_createIndex_fcfd513cf4581834","__wbg_createObjectStore_e566459f7161f82f","createObjectStore","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_574e78ad8b13b65f","crypto","__wbg_debug_3cb59063b29f58c1","console","__wbg_debug_9f9ca054ed65663b","__wbg_decryptedroomevent_new","__wbg_decryptedtodeviceevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_3f08ae00cd288224","deleteObjectStore","__wbg_delete_200677093b4cf756","delete","__wbg_delete_2ecf7cf20900b3a2","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_769e5ede4b31c67b","done","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_3265d4158b33e5dc","entries","__wbg_entries_c8a90a7ed73e84ce","__wbg_error_31166d6a0878abd2","error","__wbg_error_524f506f44df1645","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_ff4ddaabdfc5dbb3","__wbg_from_2a5d3e218e67aa85","from","__wbg_getAllKeys_b11d8835dc4be0e8","getAllKeys","__wbg_getAll_304e868beec2021f","getAll","__wbg_getAll_d1e60c13c0073374","__wbg_getAll_e6903c610babcd42","__wbg_getRandomValues_3d90134a348e46b3","globalThis","getRandomValues","__wbg_getRandomValues_b8f5dbd5f3995a9e","__wbg_getTime_46267b1c24877e30","getTime","__wbg_get_67b2ba62fc30de12","Reflect","__wbg_get_8da03f81f6a1111e","__wbg_get_93e54e8e166fbcab","__wbg_get_b9b93047fe3cf45b","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_global_b6f5c73312f62313","global","__wbg_inboundgroupsession_new","__wbg_index_e00ca5fff206ee3e","index","__wbg_indexedDB_601ec26c63e333de","indexedDB","__wbg_indexedDB_b1f49280282046f8","__wbg_indexedDB_f6b47b0dc333fd2f","__wbg_info_10396dc5295175f6","info","__wbg_info_3daf2e093e091b66","__wbg_instanceof_ArrayBuffer_e14585432e3737fc","ArrayBuffer","__wbg_instanceof_Map_f3469ce2244d2430","Map","__wbg_instanceof_Promise_935168b8f4b49db3","Promise","__wbg_instanceof_Uint8Array_17156bcf118086a9","__wbg_invalidtodeviceevent_new","__wbg_isArray_a1eab7e0d067391b","__wbg_isSafeInteger_343e2beeeece1bb0","Number","isSafeInteger","__wbg_item_c3c26b4103ad5aaf","item","__wbg_iterator_9a24c88df860dc65","Symbol","iterator","__wbg_key_29fefecef430db96","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_238152a0aedbb6e7","__wbg_length_a446193dc22c12f8","__wbg_length_e2d2a49132c1b256","__wbg_lowerBound_1872d19f5bcf83c6","lowerBound","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_5c5d919204d42400","__wbg_msCrypto_a61aeb35a24c1329","msCrypto","__wbg_name_f2d27098bfd843e7","__wbg_new_23a2665fac83c611","state0","closure445_externref_shim","__wbg_adapter_820","__wbg_new_31a97dac4f10fab7","Date","__wbg_new_405e22f390576ce2","__wbg_new_5e0be73521bc8c17","__wbg_new_78feb108b6472713","__wbg_new_7a91e41fe43b3c92","Uint8ClampedArray","__wbg_new_8a6f238a6ece86ea","__wbg_new_a12002a7f91c75be","__wbg_new_a239edaa1dc2968f","Set","__wbg_newnoargs_105ed471475aaf50","Function","__wbg_newwithbyteoffsetandlength_6d34787141015158","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithlength_a381634e90c276d4","__wbg_newwithlength_ee8e1b95dea9d37c","__wbg_newwithmessage_baedba94f03976fd","DOMException","__wbg_next_25feadfc0913fea9","next","__wbg_next_6574e1a8a62d1055","__wbg_node_905d3e251edff8a2","node","__wbg_now_2c95c9de01293173","now","__wbg_now_807e54c39636c349","__wbg_objectStoreNames_9bb1ab04a7012aaf","objectStoreNames","__wbg_objectStore_21878d46d25b64b6","objectStore","__wbg_oldVersion_e8337811e52861c6","oldVersion","__wbg_olmmachine_new","__wbg_openCursor_1adef2266972fb45","openCursor","__wbg_openCursor_238e247d18bde2cd","__wbg_openCursor_f4b061aa6d804b93","__wbg_open_88b1390d99a7c691","__wbg_open_e0c0b2993eb596e1","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_def2e24ef1252aff","parse","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_plaintexttodeviceevent_new","__wbg_process_dc0fbacc7c1c06f7","process","__wbg_push_737cfc8c1432c2c6","__wbg_put_066faa31a6a88f5b","put","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_97d92b4fcc8a61c5","queueMicrotask","__wbg_queueMicrotask_d3219def82552485","__wbg_randomFillSync_ac0988aba3254290","randomFillSync","__wbg_readyState_4013cfdf4f22afb0","readyState","indexOf","__wbg_rehydrateddevice_new","__wbg_require_60cc747a6bc5215a","__wbg_resolve_4851785c9c5f573d","resolve","__wbg_result_f29afabdf2c05826","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","setTimeout","__wbg_set_37837023f3d740e8","__wbg_set_3f1d0b984ed272ed","__wbg_set_65595bdd868b3009","__wbg_set_6775f73144c2ef27","__wbg_set_8fc6bf8a5b1071d1","__wbg_setonabort_3bf4db6614fa98e9","onabort","__wbg_setonblocked_aebf64bd39f1eca8","onblocked","__wbg_setoncomplete_4d19df0dadb7c4d4","oncomplete","__wbg_setonerror_b0d9d723b8fddbbb","onerror","__wbg_setonerror_d7e3056cc6e56085","__wbg_setonsuccess_afa464ee777a396d","onsuccess","__wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f","onupgradeneeded","__wbg_setonversionchange_6ee07fa49ee1e3a5","onversionchange","__wbg_setunique_dd24c422aa05df89","unique","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_88a902d13a557d07","__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0","__wbg_static_accessor_SELF_37c5d418e4bf5819","self","__wbg_static_accessor_WINDOW_5de37043a91a9c40","window","__wbg_storehandle_new","__wbg_stringify_f7ed6987935b4a24","__wbg_subarray_aa9065fa9dc5df96","__wbg_target_0a62d9d79a2a1ede","target","__wbg_then_44b73946d2fb3e7d","then","__wbg_then_48b406749878a531","__wbg_todevicerequest_new","__wbg_transaction_babc423936946a37","transaction","__wbg_transaction_d6d07c3c9963c49e","__wbg_transaction_e713aa7b07ccaedd","__wbg_update_acd72607f506872a","update","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_utdtodeviceevent_new","__wbg_value_68c4e9a54bb7fd5e","__wbg_value_cd1ffa7b1ab794f1","__wbg_values_53465c57fc8cd691","values","__wbg_verificationrequest_new","__wbg_version_a70a33e5bbc6d6db","__wbg_versions_c01dfd4722a88165","versions","__wbg_warn_2f770ebe9dde717f","warn","__wbg_warn_4ca3906c248c47c4","__wbindgen_array_new","__wbindgen_array_push","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","setBigInt64","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1111","__wbindgen_closure_wrapper2291","__wbindgen_closure_wrapper5405","__wbindgen_closure_wrapper6870","__wbindgen_closure_wrapper6872","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","grow","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","setFloat64","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number"],"sourceRoot":""}