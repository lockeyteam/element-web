{"version":3,"file":"bundles/33bc6f3e6b9862f2c242/3380.js","mappings":"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","sources":["webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index-wasm-esm.mjs","webpack://element-web/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js"],"sourcesContent":["// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entry point for ESM environments which support the ES Module Integration Proposal for WebAssembly [1].\n *\n * [1]: https://github.com/webassembly/esm-integration\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    /** @type {typeof import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm.d.ts\")} */\n    // @ts-expect-error TSC can't find the definitions file, for some reason.\n    const wasm = await import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\");\n    bindings.__wbg_set_wasm(wasm);\n    wasm.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nconst MAX_SAFARI_DECODE_BYTES = 2146435072;\nlet numBytesDecoded = 0;\nfunction decodeText(ptr, len) {\n    numBytesDecoded += len;\n    if (numBytesDecoded >= MAX_SAFARI_DECODE_BYTES) {\n        cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n        cachedTextDecoder.decode();\n        numBytesDecoded = len;\n    }\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return decodeText(ptr, len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nconst cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure41_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm.wasm_bindgen__convert__closures_____invoke__h8861d869601ff522(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure756_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1, arg2) {\n    wasm.closure438_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_70(arg0, arg1) {\n    wasm.wasm_bindgen__convert__closures_____invoke__hce61fd14ea1a6ce1(arg0, arg1);\n}\n\nfunction __wbg_adapter_836(arg0, arg1, arg2, arg3) {\n    wasm.closure451_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n    /**\n     * The `sender` field on the event does not match the owner of the device\n     * that established the Megolm session.\n     */\n    MismatchedSender: 7, \"7\": \"MismatchedSender\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The type of a {@link ProcessedToDeviceEvent}.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const ProcessedToDeviceEventType = Object.freeze({\n    /**\n     * A successfully-decrypted encrypted to-device message.\n     */\n    Decrypted: 0, \"0\": \"Decrypted\",\n    /**\n     * An encrypted to-device message which could not be decrypted.\n     */\n    UnableToDecrypt: 1, \"1\": \"UnableToDecrypt\",\n    /**\n     * An unencrypted to-device message (sent in clear).\n     */\n    PlainText: 2, \"2\": \"PlainText\",\n    /**\n     * An invalid to-device message that was ignored because it is missing some\n     * required information to be processed (like no event `type` for\n     * example)\n     */\n    Invalid: 3, \"3\": \"Invalid\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n    /**\n     * The `sender` field on the event does not match the owner of the device\n     * that established the Megolm session.\n     */\n    MismatchedSender: 6, \"6\": \"MismatchedSender\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * Reason code for a to-device decryption failure\n * @enum {0 | 1 | 2 | 3}\n */\nexport const ToDeviceUnableToDecryptReason = Object.freeze({\n    /**\n     * An error occurred while encrypting the event. This covers all\n     * `OlmError` types.\n     */\n    DecryptionFailure: 0, \"0\": \"DecryptionFailure\",\n    /**\n     * We refused to decrypt the message because the sender's device is not\n     * verified, or more generally, the sender's identity did not match the\n     * trust requirement we were asked to provide.\n     */\n    UnverifiedSenderDevice: 1, \"1\": \"UnverifiedSenderDevice\",\n    /**\n     * We have no `OlmMachine`. This should not happen unless we forget to set\n     * things up by calling `OlmMachine::activate()`.\n     */\n    NoOlmMachine: 2, \"2\": \"NoOlmMachine\",\n    /**\n     * The Matrix SDK was compiled without encryption support.\n     */\n    EncryptionIsDisabled: 3, \"3\": \"EncryptionIsDisabled\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Base64EncodedPkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_base64encodedpkmessage_free(ptr >>> 0, 1));\n/**\n * The base64-encoded variant of a {@link PkMessage}.\n *\n * This can be useful if the encrypted message should be put into JSON.\n */\nexport class Base64EncodedPkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Base64EncodedPkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        Base64EncodedPkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Base64EncodedPkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_base64encodedpkmessage_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @returns {string}\n     */\n    get ciphertext() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ciphertext(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @param {string} arg0\n     */\n    set ciphertext(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @returns {string}\n     */\n    get mac() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_mac(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @param {string} arg0\n     */\n    set mac(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @returns {string}\n     */\n    get ephemeralKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @param {string} arg0\n     */\n    set ephemeralKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Creates a new base64-encoded encrypted message from its parts.\n     * @param {string} ciphertext\n     * @param {string} mac\n     * @param {string} ephemeral_key\n     */\n    constructor(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.base64encodedpkmessage_new(ptr0, len0, ptr1, len1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        Base64EncodedPkMessageFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Curve25519SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519secretkey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 secret key.\n */\nexport class Curve25519SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519secretkey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random Curve25519 secret key.\n     * @returns {Curve25519SecretKey}\n     */\n    static new() {\n        const ret = wasm.curve25519secretkey_new();\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a base64-encoded representation of\n     * the key.\n     * @param {string} string\n     * @returns {Curve25519SecretKey}\n     */\n    static fromBase64(string) {\n        const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n    /**\n     * Encodes the secret key into a base64 string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519secretkey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Converts the secret key into a raw byte vector.\n     * @returns {Uint8Array}\n     */\n    toUint8Array() {\n        const ret = wasm.curve25519secretkey_toUint8Array(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a raw byte slice.\n     * @param {Uint8Array} slice\n     * @returns {Curve25519SecretKey}\n     */\n    static fromUint8Array(slice) {\n        const ptr0 = passArray8ToWasm0(slice, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromUint8Array(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptedToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an encrypted to-device event, after it has been decrypted.\n */\nexport class DecryptedToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The decrypted event, as if it had been sent in the clear, encoded as\n     * JSON.\n     *\n     * Typically contains properties `type`, `sender` and `content`.\n     *\n     * (For room keys or secrets, some part of the content might have been\n     * zeroized).\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_decryptedtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption information for the event.\n     * @returns {ToDeviceEncryptionInfo}\n     */\n    get encryptionInfo() {\n        const ret = wasm.__wbg_get_decryptedtodeviceevent_encryptionInfo(this.__wbg_ptr);\n        return ToDeviceEncryptionInfo.__wrap(ret);\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.Decrypted} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.decryptedtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @param {CollectStrategy | null} [share_strategy]\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content, share_strategy) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(share_strategy)) {\n            _assertClass(share_strategy, CollectStrategy);\n            ptr1 = share_strategy.__destroy_into_raw();\n        }\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content, ptr1);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded object.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded object. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how a room event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.__wbg_get_encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @param {UserId} arg0\n     */\n    set sender(arg0) {\n        _assertClass(arg0, UserId);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptioninfo_sender(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the device that sent us the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.__wbg_get_encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event.\n     *\n     * Note this is untrusted data unless {@link shieldState} shows that the\n     * sender is verified.\n     * @param {DeviceId | null} [arg0]\n     */\n    set senderDevice(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_encryptioninfo_senderDevice(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that created the\n     * megolm decryption key originally.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that created the\n     * megolm decryption key originally.\n     * @param {string} arg0\n     */\n    set senderCurve25519Key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.__wbg_get_encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @param {string | null} [arg0]\n     */\n    set senderClaimedEd25519Key(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether state event encryption is enabled.\n     * @returns {boolean}\n     */\n    get encryptStateEvents() {\n        const ret = wasm.__wbg_get_encryptionsettings_encryptStateEvents(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether state event encryption is enabled.\n     * @param {boolean} arg0\n     */\n    set encryptStateEvents(arg0) {\n        wasm.__wbg_set_encryptionsettings_encryptStateEvents(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst InvalidToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_invalidtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an invalid to-device event that was ignored (because it is\n * missing some mandatory fields, for example).\n */\nexport class InvalidToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InvalidToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        InvalidToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InvalidToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_invalidtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The original message as received from sync, encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_invalidtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.Invalid} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.invalidtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the migration operation. An instance of `JsLogger`.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<void>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle, logger) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the migration operation. An instance of `JsLogger`.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<void>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle, logger) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the migration operation. An instance of `JsLogger`.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<void>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle, logger) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     * `Promise` from a constructor is not idiomatic in JavaScript.\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     *\n     * * `logger` - Optional logger to use for all operations on this machine.\n     *   An instance of `JsLogger`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @param {any | null} [logger]\n     * @returns {Promise<OlmMachine>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase, logger) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     *\n     * * `logger` - Optional logger to use for all operations on this machine.\n     *   An instance of `JsLogger`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @param {any | null} [logger]\n     * @returns {Promise<OlmMachine>}\n     */\n    static initFromStore(user_id, device_id, store_handle, logger) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     * * `decryption_settings`: Optionally, the settings to use when decrypting\n     *   to-device events. If not set, to-device events will be decrypted with\n     *   a {@link TrustRequirement} of `Untrusted`.\n     *\n     * # Returns\n     *\n     * A list of values, each of which can be any of:\n     *   * {@link DecryptedToDeviceEvent}\n     *   * {@link PlainTextToDeviceEvent}\n     *   * {@link UTDToDeviceEvent}\n     *   * {@link InvalidToDeviceEvent}\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @param {DecryptionSettings | null} [decryption_settings]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys, decryption_settings) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        let ptr1 = 0;\n        if (!isLikeNone(decryption_settings)) {\n            _assertClass(decryption_settings, DecryptionSettings);\n            ptr1 = decryption_settings.__destroy_into_raw();\n        }\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys), ptr1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a state event for the given room.\n     *\n     * This method encrypts a state event for the specified room, using the\n     * current group session. The event will be encrypted so that only\n     * authorized room members can decrypt it.\n     *\n     * **Note**: A room key must have been shared with the group of users in\n     * the room before calling this method. If not, this method will panic.\n     *\n     * The usual flow to encrypt a state event using this machine is identical\n     * to that outlined for [`OlmMachine::encrypt_room_event`].\n     *\n     * # Arguments\n     *\n     * * `room_id` - The ID of the room for which the state event should be\n     *   encrypted.\n     * * `event_type` - The type of the state event.\n     * * `state_key` - The state key for the event.\n     * * `content` - The plaintext JSON content of the event to encrypt.\n     *\n     * # Returns\n     *\n     * A `Promise` resolving to a JSON string containing the encrypted event.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room was not previously shared.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} state_key\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptStateEvent(room_id, event_type, state_key, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(state_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptStateEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     */\n    registerDevicesUpdatedCallback(callback) {\n        wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     */\n    registerReceiveSecretCallback(callback) {\n        wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<any>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<any>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<any>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<RoomSettings|undefined>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Assemble, and encrypt, a room key bundle for sharing encrypted history,\n     * as per {@link https://github.com/matrix-org/matrix-spec-proposals/pull/4268|MSC4268}.\n     *\n     * Returns `undefined` if there are no keys to share in the given room,\n     * otherwise an {@link EncryptedAttachment}.\n     *\n     * The data should be uploaded to the media server, and the details then\n     * passed to {@link shareRoomKeyBundleData}.\n     *\n     * @experimental\n     * @param {RoomId} room_id\n     * @returns {Promise<EncryptedAttachment | undefined>}\n     */\n    buildRoomKeyBundle(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_buildRoomKeyBundle(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Collect the devices belonging to the given user, and send the details\n     * of a room key bundle to those devices.\n     *\n     * Returns a list of to-device requests which must be sent.\n     *\n     * @experimental\n     * @param {UserId} user\n     * @param {RoomId} room\n     * @param {string} url\n     * @param {string | null | undefined} media_encryption_info\n     * @param {CollectStrategy} sharing_strategy\n     * @returns {Promise<ToDeviceRequest[]>}\n     */\n    shareRoomKeyBundleData(user, room, url, media_encryption_info, sharing_strategy) {\n        _assertClass(user, UserId);\n        _assertClass(room, RoomId);\n        const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(media_encryption_info) ? 0 : passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        _assertClass(sharing_strategy, CollectStrategy);\n        var ptr2 = sharing_strategy.__destroy_into_raw();\n        const ret = wasm.olmmachine_shareRoomKeyBundleData(this.__wbg_ptr, user.__wbg_ptr, room.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * See if we have received an {@link https://github.com/matrix-org/matrix-spec-proposals/pull/4268|MSC4268}\n     * room key bundle for the given room from the given user.\n     *\n     * Before calling this, the application must make sure that we have an\n     * up-to-date copy of the inviter's cross-signing keys, so that we can\n     * verify the device that sent us the key bundle data message. (For\n     * now, the easiest way to do that is by calling {@link queryKeysForUsers}\n     * for the inviter, and making the resultant request.)\n     *\n     * Returns either `undefined` if no suitable bundle has been received,\n     * or an {@link StoredRoomKeyBundleData}, in which case, the bundle\n     * should be downloaded, and then passed to {@link\n     * receiveRoomKeyBundle}.\n     *\n     * @experimental\n     * @param {RoomId} room_id\n     * @param {UserId} inviter\n     * @returns {Promise<StoredRoomKeyBundleData | undefined>}\n     */\n    getReceivedRoomKeyBundleData(room_id, inviter) {\n        _assertClass(room_id, RoomId);\n        _assertClass(inviter, UserId);\n        const ret = wasm.olmmachine_getReceivedRoomKeyBundleData(this.__wbg_ptr, room_id.__wbg_ptr, inviter.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import the message keys from a downloaded room key bundle.\n     *\n     * After {@link getReceivedRoomKeyBundleData} returns a truthy result, the\n     * media file should be downloaded and then passed into this method to\n     * actually do the import.\n     *\n     * @experimental\n     * @param {StoredRoomKeyBundleData} bundle_data\n     * @param {Uint8Array} encrypted_bundle\n     * @returns {Promise<undefined>}\n     */\n    receiveRoomKeyBundle(bundle_data, encrypted_bundle) {\n        _assertClass(bundle_data, StoredRoomKeyBundleData);\n        var ptr0 = bundle_data.__destroy_into_raw();\n        const ptr1 = passArray8ToWasm0(encrypted_bundle, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_receiveRoomKeyBundle(this.__wbg_ptr, ptr0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PkDecryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkdecryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key decryption instance.\n *\n * This implements the decryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkEncryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkDecryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkDecryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkDecryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkDecryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkdecryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkDecryption` instance with a newly generated key pair.\n     */\n    constructor() {\n        const ret = wasm.pkdecryption_new();\n        this.__wbg_ptr = ret >>> 0;\n        PkDecryptionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Creates a `PkDecryption` instance from a secret key.\n     * @param {Curve25519SecretKey} key\n     * @returns {PkDecryption}\n     */\n    static fromKey(key) {\n        _assertClass(key, Curve25519SecretKey);\n        const ret = wasm.pkdecryption_fromKey(key.__wbg_ptr);\n        return PkDecryption.__wrap(ret);\n    }\n    /**\n     * Returns the secret key associated with this `PkDecryption` instance.\n     * @returns {Curve25519SecretKey}\n     */\n    secretKey() {\n        const ret = wasm.pkdecryption_secretKey(this.__wbg_ptr);\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Returns the public key associated with this decryption instance.\n     *\n     * This can be used to construct a {@link PkEncryption} object to encrypt a\n     * message for this `PkDecryption` object.\n     * @returns {Curve25519PublicKey}\n     */\n    publicKey() {\n        const ret = wasm.pkdecryption_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Decrypts an encrypted message and returns the plaintext as a UTF-8\n     * string.\n     * @param {PkMessage} message\n     * @returns {string}\n     */\n    decryptString(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            _assertClass(message, PkMessage);\n            const ret = wasm.pkdecryption_decryptString(this.__wbg_ptr, message.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypts an encrypted message and returns the raw `Uint8Array`.\n     * @param {PkMessage} message\n     * @returns {Uint8Array}\n     */\n    decrypt(message) {\n        _assertClass(message, PkMessage);\n        const ret = wasm.pkdecryption_decrypt(this.__wbg_ptr, message.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst PkEncryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkencryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key encryption instance.\n *\n * This implements the encryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkDecryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkEncryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkEncryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkEncryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkencryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkEncryption` instance from a public key.\n     * @param {Curve25519PublicKey} public_key\n     * @returns {PkEncryption}\n     */\n    static fromKey(public_key) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ret = wasm.pkencryption_fromKey(public_key.__wbg_ptr);\n        return PkEncryption.__wrap(ret);\n    }\n    /**\n     * Encrypts a byte message and returns an encrypted {@link PkMessage}.\n     * @param {Uint8Array} message\n     * @returns {PkMessage}\n     */\n    encrypt(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Encrypts a string message and returns an encrypted {@link PkMessage}.\n     * @param {string} message\n     * @returns {PkMessage}\n     */\n    encryptString(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n}\n\nconst PkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkmessage_free(ptr >>> 0, 1));\n/**\n * A class representing an encrypted message using {@link PkEncryption}.\n */\nexport class PkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        PkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkmessage_free(ptr, 0);\n    }\n    /**\n     * Returns the raw ciphertext as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    ciphertext() {\n        const ret = wasm.pkmessage_ciphertext(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the raw message authentication code (MAC) as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    mac() {\n        const ret = wasm.pkmessage_mac(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the ephemeral public key used during encryption.\n     * @returns {Curve25519PublicKey}\n     */\n    ephemeralKey() {\n        const ret = wasm.pkmessage_ephemeralKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from its parts: ciphertext, MAC, and ephemeral\n     * key.\n     * @param {Uint8Array} ciphertext\n     * @param {Uint8Array} mac\n     * @param {Curve25519PublicKey} ephemeral_key\n     * @returns {PkMessage}\n     */\n    static fromParts(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(ephemeral_key, Curve25519PublicKey);\n        const ret = wasm.pkmessage_fromParts(ptr0, len0, ptr1, len1, ephemeral_key.__wbg_ptr);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from a base64-encoded representation.\n     * @param {Base64EncodedPkMessage} message\n     * @returns {PkMessage}\n     */\n    static fromBase64(message) {\n        _assertClass(message, Base64EncodedPkMessage);\n        const ret = wasm.pkmessage_fromBase64(message.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return PkMessage.__wrap(ret[0]);\n    }\n    /**\n     * Converts the `PkMessage` into a base64-encoded representation.\n     * @returns {Base64EncodedPkMessage}\n     */\n    toBase64() {\n        const ret = wasm.pkmessage_toBase64(this.__wbg_ptr);\n        return Base64EncodedPkMessage.__wrap(ret);\n    }\n}\n\nconst PlainTextToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_plaintexttodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents a to-device event sent in the clear.\n */\nexport class PlainTextToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PlainTextToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        PlainTextToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PlainTextToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plaintexttodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The to-device message, containing `type`, `sender` and `content` fields,\n     * encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_plaintexttodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.PlainText} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.plaintexttodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events` is a JSON-encoded result of the `events` array from\n     *   `/dehydrated_device/{device_id}/events`.\n     * * `decryption_settings`: Optionally, the settings to use when decrypting\n     *   to-device events. If not set, to-device events will be decrypted with\n     *   a {@link TrustRequirement} of `Untrusted`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @param {DecryptionSettings | null} [decryption_settings]\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events, decryption_settings) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        let ptr1 = 0;\n        if (!isLikeNone(decryption_settings)) {\n            _assertClass(decryption_settings, DecryptionSettings);\n            ptr1 = decryption_settings.__destroy_into_raw();\n        }\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0, ptr1);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether state event encryption is enabled.\n     * @returns {boolean}\n     */\n    get encryptStateEvents() {\n        const ret = wasm.__wbg_get_roomsettings_encryptStateEvents(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether state event encryption is enabled.\n     * @param {boolean} arg0\n     */\n    set encryptStateEvents(arg0) {\n        wasm.__wbg_set_roomsettings_encryptStateEvents(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 7 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 7 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     *\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the open operation. An instance of `JsLogger`.\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @param {any | null} [logger]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase, logger) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     *\n     * * `logger` - An optional logger instance to use for writing log messages\n     *   during the open operation. An instance of `JsLogger`.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @param {any | null} [logger]\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key, logger) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1, isLikeNone(logger) ? 0 : addToExternrefTable0(logger));\n        return ret;\n    }\n}\n\nconst StoredRoomKeyBundleDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storedroomkeybundledata_free(ptr >>> 0, 1));\n/**\n * Information on a stored room key bundle data event.\n */\nexport class StoredRoomKeyBundleData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoredRoomKeyBundleData.prototype);\n        obj.__wbg_ptr = ptr;\n        StoredRoomKeyBundleDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoredRoomKeyBundleDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storedroomkeybundledata_free(ptr, 0);\n    }\n    /**\n     * The user that sent us this data.\n     * @returns {UserId}\n     */\n    get senderUser() {\n        const ret = wasm.storedroomkeybundledata_senderUser(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The room that these keys are for.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.storedroomkeybundledata_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The location of the bundle.\n     * @returns {string}\n     */\n    get url() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.storedroomkeybundledata_url(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The JSON-encoded encryption info for the key bundle.\n     *\n     * @deprecated Should not be used within applications.\n     * @returns {string}\n     */\n    get encryptionInfo() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.storedroomkeybundledata_encryptionInfo(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst ToDeviceEncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todeviceencryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how a to-device message was decrypted.\n */\nexport class ToDeviceEncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceEncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceEncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceEncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todeviceencryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that encrypted\n     * the message.\n     * @returns {string}\n     */\n    get senderCurve25519Key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_todeviceencryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public Curve25519 key of the device that encrypted\n     * the message.\n     * @param {string} arg0\n     */\n    set senderCurve25519Key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.__wbg_get_todeviceencryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The user ID of the sender of the event.\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @param {UserId} arg0\n     */\n    set sender(arg0) {\n        _assertClass(arg0, UserId);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_todeviceencryptioninfo_sender(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the device that sent us the to-device message.\n     *\n     * Could be `undefined` in the case where the to-device message sender\n     * checks are delayed. There is no delay for to-device messages other\n     * than `m.room_key`, so this will always be truthy for other\n     * message types (the decryption would fail if the sender device keys\n     * cannot be found).\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.__wbg_get_todeviceencryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the to-device message.\n     *\n     * Could be `undefined` in the case where the to-device message sender\n     * checks are delayed. There is no delay for to-device messages other\n     * than `m.room_key`, so this will always be truthy for other\n     * message types (the decryption would fail if the sender device keys\n     * cannot be found).\n     *\n     * Note this is untrusted data unless {@link isSenderVerified} is true.\n     * @param {DeviceId | null} [arg0]\n     */\n    set senderDevice(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_todeviceencryptioninfo_senderDevice(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Returns whether the sender device is in a verified state.\n     * This reflects the state at the time of decryption.\n     * @returns {boolean}\n     */\n    isSenderVerified() {\n        const ret = wasm.todeviceencryptioninfo_isSenderVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst ToDeviceUnableToDecryptInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todeviceunabletodecryptinfo_free(ptr >>> 0, 1));\n/**\n * Metadata about a to-device event that could not be decrypted.\n */\nexport class ToDeviceUnableToDecryptInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceUnableToDecryptInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceUnableToDecryptInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceUnableToDecryptInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todeviceunabletodecryptinfo_free(ptr, 0);\n    }\n    /**\n     * Reason code for the decryption failure\n     * @returns {ToDeviceUnableToDecryptReason}\n     */\n    get reason() {\n        const ret = wasm.__wbg_get_todeviceunabletodecryptinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Reason code for the decryption failure\n     * @param {ToDeviceUnableToDecryptReason} arg0\n     */\n    set reason(arg0) {\n        wasm.__wbg_set_todeviceunabletodecryptinfo_reason(this.__wbg_ptr, arg0);\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UTDToDeviceEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_utdtodeviceevent_free(ptr >>> 0, 1));\n/**\n * Represents an encrypted to-device event that could not be decrypted.\n */\nexport class UTDToDeviceEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UTDToDeviceEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        UTDToDeviceEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UTDToDeviceEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_utdtodeviceevent_free(ptr, 0);\n    }\n    /**\n     * The original message (of type `m.room.encrypted`) that failed to be\n     * decrypted, encoded as JSON.\n     * @returns {string}\n     */\n    get rawEvent() {\n        const ret = wasm.__wbg_get_utdtodeviceevent_rawEvent(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Information on the reason we failed to decrypt\n     * @returns {ToDeviceUnableToDecryptInfo}\n     */\n    get utdInfo() {\n        const ret = wasm.__wbg_get_utdtodeviceevent_utdInfo(this.__wbg_ptr);\n        return ToDeviceUnableToDecryptInfo.__wrap(ret);\n    }\n    /**\n     * The type of processed to-device event. Always {@link\n     * ProcessedToDeviceEventType.UnableToDecrypt} for this type.\n     * @returns {ProcessedToDeviceEventType}\n     */\n    get type() {\n        const ret = wasm.utdtodeviceevent_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded object containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_Error_0497d5bdba9362e5(arg0, arg1) {\n    const ret = Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_64c6e51ab0ed12dd() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_add_dd833f9f523abe36(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_at_5b2884630cb66ea6(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_0274374bea7f6bca() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_eb572b424befade3() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_a1a27a0dfa70165d(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_1b920c3ac0afee4b() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_36f1bbf64b4cf7c7() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_f2db6205e5c51dc8() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_fbe8be8bf6436ce5() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_e6ec1cc113e1555e() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_2079e209ea5709b5(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_5e459ca721f994f5(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_7d9cdafc888cb902() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_2941fdbb8154c02d() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_5ceb291ba9a02b4b() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_32ba53785b2ef24e() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_a343510ba567e58c() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_b1f08961900155dd() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_574e78ad8b13b65f(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_58d16ea352cfbca1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_ada37632f0e8cdde(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_decryptedtodeviceevent_new(arg0) {\n    const ret = DecryptedToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_7b427b19378475fd() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_1af2aac87b36c0f1() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_71b7921c73aa9378() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_4d01f352bade43b7(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptedattachment_new(arg0) {\n    const ret = EncryptedAttachment.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_41651c850143b957(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c951fa14164704e7(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_24afdcd463ac8bd9(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_4e978abc9692c0c5() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_error_51ecdd39ec054205(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_from_12ff8e47307bd4c7(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_fce3f6ef8201c450() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_22a744d3b40f0fb5() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_654e689108532352() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_864be044b219e256() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_38a1ff1ea09f6cc7() { return handleError(function (arg0, arg1) {\n    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));\n}, arguments) };\n\nexport function __wbg_getRandomValues_b8f5dbd5f3995a9e() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_2afe67905d873e92(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_92470be87867c2e5() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_a131a44bd1eb6979(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_get_a4719581b0d717ad() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_d37904b955701f99() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_405783ca8da5f008() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_317016dcb8a872d6() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_63b82e158eb67cbd() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_e56933705c348038(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_info_f3589034369581f6(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_a8b6f580b363f2bc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_80cc65041c96417a(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_66f94afc64d9039f(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_ca460677bc155827(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_invalidtodeviceevent_new(arg0) {\n    const ret = InvalidToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_isArray_2a07fd175d45c496(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isArray_5f090bed72bd4f89(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_90d7c4674047d684(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_15285ca2d766f142(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_4068add5b2aef7a6() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_a17a68df9ec1b180() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_471141fa24df24b2(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_ab6d22b5ead75c72(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_f00ec12454a5d9fd(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_13c8e875a3fb9f7d() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_2d95ea5aff0d63b9(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_a61aeb35a24c1329(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_2acff1e83d9735f9(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_07b483f72211fd66() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_58353953ad2097cc() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a2957aa5684de228(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a979b4b45bd55c7f() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_b3a08d2910ee5170(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_db7d9b0ee94df522(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_new_e30c39c06edaabf2(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_836(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_e52b3efaaa774f96(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_ff528e72d35de39a(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_06e8c938173769b5(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_3b01ecda099177e8(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_08f872dc1e3ada2e(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_8a0d31010560ce9a(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_54042111509ba20c() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_8bb824d217961b5d(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_e2da48d8fff7439a() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_905d3e251edff8a2(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_eb0821f3bd9f6529() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_e82275eb2d403a92(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_b463d32c86d6b543() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_af5af638a028177c(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_7c13a2cd32c6258b() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_a53133c898e0829c() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_dbd279400634ae67() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_0f04f50fa4d98f67() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_b70fb421d97aad40() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_c7ba327fb6231e7f() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_plaintexttodeviceevent_new(arg0) {\n    const ret = PlainTextToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_dc0fbacc7c1c06f7(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_73fd7b5550ebf707(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_7f0b4dcc666f09e3() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_46c1df247678729f(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_8acf3ccb75ed8d11(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ac0988aba3254290() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_249e5707a38b7a7a(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_60cc747a6bc5215a() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_0dac8c580ffd4678(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_a0f1bf2fe64a516c() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_7422acbe992d64ab(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_d6bdfd275fb8a4ce(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_set_fd40eacc85c5ab66(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_fe4e79d1ed3b0e9b(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_setonabort_479ebb5884fcb171(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_046331b614d6f8e3(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_27bdbca012e45c05(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_537b68f474e27d4e(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_ce5c4d34aed931bb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_0b2b45bd8cc13b95(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_be2e0ae927917f82(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_407ebf1ad930c84c(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_727cefd7e14cf677(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_487c52c58d65314d() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_ee9704f328b6b291() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_78c9e3071b912620() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_a093d21393777366() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storedroomkeybundledata_new(arg0) {\n    const ret = StoredRoomKeyBundleData.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_c242842b97f054cc() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_dd4ade7d53bd8e26(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_15f1da583855ac4e(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_82ab9fb4080f1707(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_then_db882932c0c714c6(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_34c41b46ca391af6(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_transaction_36c8b28ed4349a9a() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_399fc15f5bba1880() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_update_297181dae0cc0af4() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_utdtodeviceevent_new(arg0) {\n    const ret = UTDToDeviceEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_17b896954e14f896(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_value_648dc44894c8dc95() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_values_81045499c3c8e670(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_2c3ed4a311fdabdf(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c01dfd4722a88165(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_9b968a0475b49f6b(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbg_warn_d89f6637da554c8d(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbindgen_array_new() {\n    const ret = [];\n    return ret;\n};\n\nexport function __wbindgen_array_push(arg0, arg1) {\n    arg0.push(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1160(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 40, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2391(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 432, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5618(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 432, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7116(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 437, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7121(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 437, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n"],"names":["Proxy","get","Error","modPromise","async","initAsync","wasm","__wbindgen_start","loadModuleAsync","__wbg_set_wasm","val","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","MAX_SAFARI_DECODE_BYTES","numBytesDecoded","getStringFromWasm0","ptr","len","subarray","decodeText","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_4","handleError","f","args","apply","this","e","__wbindgen_exn_store","isLikeNone","x","getArrayU8FromWasm0","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_6","dtor","a","b","makeMutClosure","arg0","arg1","cnt","real","original","makeClosure","debugString","type","description","name","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","passArray8ToWasm0","takeFromExternrefTable0","value","__externref_table_dealloc","_assertClass","instance","klass","passArrayJsValueToWasm0","array","add","setUint32","getArrayJsValueFromWasm0","result","push","getUint32","__externref_drop_slice","cachedUint16ArrayMemory0","getArrayU16FromWasm0","Uint16Array","getVersions","ret","Versions","__wrap","__wbg_adapter_58","arg2","closure41_externref_shim_multivalue_shim","__wbg_adapter_61","wasm_bindgen__convert__closures_____invoke__h8861d869601ff522","__wbg_adapter_64","closure756_externref_shim","__wbg_adapter_67","closure438_externref_shim","__wbg_adapter_70","wasm_bindgen__convert__closures_____invoke__hce61fd14ea1a6ce1","DecryptionErrorCode","Object","freeze","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","MismatchedSender","EncryptionAlgorithm","Ed25519","Curve25519","Unknown","OlmV1Curve25519AesSha2","MegolmV1AesSha2","HistoryVisibility","Invited","Joined","Shared","WorldReadable","LocalTrust","Verified","BlackListed","Ignored","Unset","ProcessedToDeviceEventType","Trace","Debug","Info","Warn","Decrypted","PlainText","Invalid","QrCodeMode","Login","Reciprocate","QrState","Created","Scanned","Confirmed","Reciprocated","Done","Cancelled","ShieldColor","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","Red","Grey","None","ShieldStateCode","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","TrustRequirement","Missing","ValidButNotTrusted","ValidAndTrusted","DecryptionFailure","UnverifiedSenderDevice","NoOlmMachine","EncryptionIsDisabled","Untrusted","CrossSignedOrLegacy","CrossSigned","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","VerificationRequestPhase","Requested","Ready","Transitioned","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","__wbg_attachment_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","__wbg_ptr","__destroy_into_raw","free","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","backupdecryptionkey_fromBase64","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","ptr4","len4","__wbindgen_free","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","v1","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","__wbg_base64encodedpkmessage_free","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","allDevices","collectstrategy_allDevices","errorOnUnverifiedUserProblem","collectstrategy_errorOnUnverifiedUserProblem","identityBasedStrategy","collectstrategy_identityBasedStrategy","onlyTrustedDevices","collectstrategy_onlyTrustedDevices","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","__wbg_curve25519secretkey_free","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptedToDeviceEventFinalization","__wbg_decryptedtodeviceevent_free","DecryptedToDeviceEvent","rawEvent","__wbg_get_decryptedtodeviceevent_rawEvent","encryptionInfo","__wbg_get_decryptedtodeviceevent_encryptionInfo","ToDeviceEncryptionInfo","decryptedtodeviceevent_type","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","dehydrateddevice_keysForUpload","DehydratedDeviceKeyFinalization","__wbg_dehydrateddevicekey_free","dehydrateddevicekey_createRandomKey","createKeyFromArray","dehydrateddevicekey_createKeyFromArray","dehydrateddevicekey_toBase64","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","getDehydratedDeviceKey","dehydrateddevices_getDehydratedDeviceKey","saveDehydratedDeviceKey","dehydrateddevices_saveDehydratedDeviceKey","deleteDehydratedDeviceKey","dehydrateddevices_deleteDehydratedDeviceKey","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","share_strategy","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","EncryptedAttachmentFinalization","__wbg_encryptedattachment_free","EncryptedAttachment","encrypted_data","media_encryption_info","encryptedattachment_new","encryptedData","encryptedattachment_encryptedData","mediaEncryptionInfo","encryptedattachment_mediaEncryptionInfo","hasMediaEncryptionInfoBeenConsumed","encryptedattachment_hasMediaEncryptionInfoBeenConsumed","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","__wbg_get_encryptioninfo_sender","__wbg_set_encryptioninfo_sender","__wbg_get_encryptioninfo_senderDevice","__wbg_set_encryptioninfo_senderDevice","__wbg_get_encryptioninfo_senderCurve25519Key","__wbg_get_encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","encryptStateEvents","__wbg_get_encryptionsettings_encryptStateEvents","__wbg_set_encryptionsettings_encryptStateEvents","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","encrypt","deferred2_0","deferred2_1","establishedecies_encrypt","decrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","__wbg_get_inboundcreationresult_message","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","InvalidToDeviceEventFinalization","__wbg_invalidtodeviceevent_free","InvalidToDeviceEvent","__wbg_get_invalidtodeviceevent_rawEvent","invalidtodeviceevent_type","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","__wbg_get_keysclaimrequest_id","__wbg_get_keysclaimrequest_body","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","__wbg_get_keysqueryrequest_id","__wbg_get_keysqueryrequest_body","keysqueryrequest_new","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","__wbg_get_keysuploadrequest_id","__wbg_get_keysuploadrequest_body","keysuploadrequest_new","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","__wbg_get_megolmdecryptionerror_description","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","pickle_key","store_handle","logger","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","decryption_settings","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","encryptStateEvent","state_key","olmmachine_encryptStateEvent","decryptRoomEvent","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","buildRoomKeyBundle","olmmachine_buildRoomKeyBundle","shareRoomKeyBundleData","user","room","url","sharing_strategy","olmmachine_shareRoomKeyBundleData","getReceivedRoomKeyBundleData","inviter","olmmachine_getReceivedRoomKeyBundleData","receiveRoomKeyBundle","bundle_data","encrypted_bundle","StoredRoomKeyBundleData","olmmachine_receiveRoomKeyBundle","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","__wbg_get_outboundcreationresult_initial_message","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","__wbg_get_pickledinboundgroupsession_pickle","__wbg_get_pickledinboundgroupsession_senderKey","senderSigningKey","__wbg_get_pickledinboundgroupsession_senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","__wbg_get_pickledsession_pickle","__wbg_get_pickledsession_senderKey","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","__wbg_pkdecryption_free","__wbg_pkencryption_free","__wbg_pkmessage_free","PlainTextToDeviceEventFinalization","__wbg_plaintexttodeviceevent_free","PlainTextToDeviceEvent","__wbg_get_plaintexttodeviceevent_rawEvent","plaintexttodeviceevent_type","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","roomid_toString","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","__wbg_get_roommessagerequest_id","__wbg_get_roommessagerequest_room_id","txn_id","__wbg_get_roommessagerequest_txn_id","__wbg_get_roommessagerequest_event_type","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","__wbg_get_roomsettings_encryptStateEvents","__wbg_set_roomsettings_encryptStateEvents","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","__wbg_get_signatureuploadrequest_id","__wbg_get_signatureuploadrequest_body","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","StoredRoomKeyBundleDataFinalization","__wbg_storedroomkeybundledata_free","senderUser","storedroomkeybundledata_senderUser","storedroomkeybundledata_roomId","storedroomkeybundledata_url","storedroomkeybundledata_encryptionInfo","ToDeviceEncryptionInfoFinalization","__wbg_todeviceencryptioninfo_free","__wbg_get_todeviceencryptioninfo_senderCurve25519Key","__wbg_get_todeviceencryptioninfo_sender","__wbg_set_todeviceencryptioninfo_sender","__wbg_get_todeviceencryptioninfo_senderDevice","__wbg_set_todeviceencryptioninfo_senderDevice","isSenderVerified","todeviceencryptioninfo_isSenderVerified","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","__wbg_get_todevicerequest_id","__wbg_get_todevicerequest_event_type","__wbg_get_todevicerequest_txn_id","__wbg_get_todevicerequest_body","todevicerequest_new","todevicerequest_type","ToDeviceUnableToDecryptInfoFinalization","__wbg_todeviceunabletodecryptinfo_free","ToDeviceUnableToDecryptInfo","__wbg_get_todeviceunabletodecryptinfo_reason","__wbg_set_todeviceunabletodecryptinfo_reason","__wbg_tracing_free","UTDToDeviceEventFinalization","__wbg_utdtodeviceevent_free","UTDToDeviceEvent","__wbg_get_utdtodeviceevent_rawEvent","utdInfo","__wbg_get_utdtodeviceevent_utdInfo","utdtodeviceevent_type","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","__wbg_get_uploadsigningkeysrequest_body","uploadsigningkeysrequest_new","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","userid_toString","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","__wbg_get_versions_vodozemac","matrix_sdk_crypto","__wbg_get_versions_matrix_sdk_crypto","git_sha","__wbg_get_versions_git_sha","git_description","__wbg_get_versions_git_description","__wbg_Error_0497d5bdba9362e5","__wbg_String_8f0eb39a4a4c2f66","String","setInt32","__wbg_Window_b0044ac7db258535","Window","__wbg_WorkerGlobalScope_b74cefefc62a37da","WorkerGlobalScope","__wbg_add_64c6e51ab0ed12dd","arguments","__wbg_add_dd833f9f523abe36","__wbg_at_5b2884630cb66ea6","at","__wbg_backupkeys_new","__wbg_bound_0274374bea7f6bca","IDBKeyRange","bound","__wbg_bound_eb572b424befade3","arg3","__wbg_buffer_a1a27a0dfa70165d","__wbg_call_1b920c3ac0afee4b","__wbg_call_36f1bbf64b4cf7c7","arg4","__wbg_call_f2db6205e5c51dc8","__wbg_call_fbe8be8bf6436ce5","__wbg_clearTimeout_5a54f8841c30079a","clearTimeout","__wbg_clear_e6ec1cc113e1555e","__wbg_close_2079e209ea5709b5","__wbg_code_5e459ca721f994f5","__wbg_continue_7d9cdafc888cb902","continue","__wbg_count_2941fdbb8154c02d","__wbg_count_5ceb291ba9a02b4b","__wbg_createIndex_32ba53785b2ef24e","createIndex","__wbg_createIndex_a343510ba567e58c","__wbg_createObjectStore_b1f08961900155dd","createObjectStore","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_574e78ad8b13b65f","crypto","__wbg_debug_58d16ea352cfbca1","console","__wbg_debug_ada37632f0e8cdde","__wbg_decryptedroomevent_new","__wbg_decryptedtodeviceevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_7b427b19378475fd","deleteObjectStore","__wbg_delete_1af2aac87b36c0f1","delete","__wbg_delete_71b7921c73aa9378","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_4d01f352bade43b7","done","__wbg_emoji_new","__wbg_encryptedattachment_new","__wbg_encryptioninfo_new","__wbg_entries_41651c850143b957","entries","__wbg_entries_c951fa14164704e7","__wbg_error_24afdcd463ac8bd9","error","__wbg_error_4e978abc9692c0c5","__wbg_error_51ecdd39ec054205","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_from_12ff8e47307bd4c7","from","__wbg_getAllKeys_fce3f6ef8201c450","getAllKeys","__wbg_getAll_22a744d3b40f0fb5","getAll","__wbg_getAll_654e689108532352","__wbg_getAll_864be044b219e256","__wbg_getRandomValues_38a1ff1ea09f6cc7","globalThis","getRandomValues","__wbg_getRandomValues_b8f5dbd5f3995a9e","__wbg_getTime_2afe67905d873e92","getTime","__wbg_get_92470be87867c2e5","Reflect","__wbg_get_a131a44bd1eb6979","__wbg_get_a4719581b0d717ad","__wbg_get_d37904b955701f99","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_global_b6f5c73312f62313","global","__wbg_inboundgroupsession_new","__wbg_index_405783ca8da5f008","index","__wbg_indexedDB_317016dcb8a872d6","indexedDB","__wbg_indexedDB_601ec26c63e333de","__wbg_indexedDB_63b82e158eb67cbd","__wbg_info_e56933705c348038","info","__wbg_info_f3589034369581f6","__wbg_instanceof_ArrayBuffer_a8b6f580b363f2bc","ArrayBuffer","__wbg_instanceof_Map_80cc65041c96417a","Map","__wbg_instanceof_Promise_66f94afc64d9039f","Promise","__wbg_instanceof_Uint8Array_ca460677bc155827","__wbg_invalidtodeviceevent_new","__wbg_isArray_2a07fd175d45c496","__wbg_isArray_5f090bed72bd4f89","__wbg_isSafeInteger_90d7c4674047d684","Number","isSafeInteger","__wbg_item_15285ca2d766f142","item","__wbg_iterator_4068add5b2aef7a6","Symbol","iterator","__wbg_key_a17a68df9ec1b180","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_471141fa24df24b2","__wbg_length_ab6d22b5ead75c72","__wbg_length_f00ec12454a5d9fd","__wbg_lowerBound_13c8e875a3fb9f7d","lowerBound","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_2d95ea5aff0d63b9","__wbg_msCrypto_a61aeb35a24c1329","msCrypto","__wbg_name_2acff1e83d9735f9","__wbg_new_07b483f72211fd66","__wbg_new_58353953ad2097cc","__wbg_new_8a6f238a6ece86ea","__wbg_new_a2957aa5684de228","Date","__wbg_new_a979b4b45bd55c7f","__wbg_new_b3a08d2910ee5170","Uint8ClampedArray","__wbg_new_db7d9b0ee94df522","Set","__wbg_new_e30c39c06edaabf2","state0","closure451_externref_shim","__wbg_adapter_836","__wbg_new_e52b3efaaa774f96","__wbg_newnoargs_ff528e72d35de39a","Function","__wbg_newwithbyteoffsetandlength_06e8c938173769b5","__wbg_newwithbyteoffsetandlength_3b01ecda099177e8","__wbg_newwithlength_08f872dc1e3ada2e","__wbg_newwithlength_8a0d31010560ce9a","__wbg_newwithmessage_54042111509ba20c","DOMException","__wbg_next_8bb824d217961b5d","next","__wbg_next_e2da48d8fff7439a","__wbg_node_905d3e251edff8a2","node","__wbg_now_2c95c9de01293173","now","__wbg_now_eb0821f3bd9f6529","__wbg_objectStoreNames_e82275eb2d403a92","objectStoreNames","__wbg_objectStore_b463d32c86d6b543","objectStore","__wbg_oldVersion_af5af638a028177c","oldVersion","__wbg_olmmachine_new","__wbg_openCursor_7c13a2cd32c6258b","openCursor","__wbg_openCursor_a53133c898e0829c","__wbg_openCursor_dbd279400634ae67","__wbg_open_0f04f50fa4d98f67","__wbg_open_b70fb421d97aad40","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_c7ba327fb6231e7f","parse","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_plaintexttodeviceevent_new","__wbg_process_dc0fbacc7c1c06f7","process","__wbg_push_73fd7b5550ebf707","__wbg_put_7f0b4dcc666f09e3","put","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_46c1df247678729f","queueMicrotask","__wbg_queueMicrotask_8acf3ccb75ed8d11","__wbg_randomFillSync_ac0988aba3254290","randomFillSync","__wbg_readyState_249e5707a38b7a7a","readyState","indexOf","__wbg_rehydrateddevice_new","__wbg_require_60cc747a6bc5215a","__wbg_resolve_0dac8c580ffd4678","resolve","__wbg_result_a0f1bf2fe64a516c","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","setTimeout","__wbg_set_3f1d0b984ed272ed","__wbg_set_7422acbe992d64ab","__wbg_set_d6bdfd275fb8a4ce","__wbg_set_fd40eacc85c5ab66","__wbg_set_fe4e79d1ed3b0e9b","__wbg_setonabort_479ebb5884fcb171","onabort","__wbg_setonblocked_046331b614d6f8e3","onblocked","__wbg_setoncomplete_27bdbca012e45c05","oncomplete","__wbg_setonerror_537b68f474e27d4e","onerror","__wbg_setonerror_ce5c4d34aed931bb","__wbg_setonsuccess_0b2b45bd8cc13b95","onsuccess","__wbg_setonupgradeneeded_be2e0ae927917f82","onupgradeneeded","__wbg_setonversionchange_407ebf1ad930c84c","onversionchange","__wbg_setunique_727cefd7e14cf677","unique","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_487c52c58d65314d","__wbg_static_accessor_GLOBAL_THIS_ee9704f328b6b291","__wbg_static_accessor_SELF_78c9e3071b912620","self","__wbg_static_accessor_WINDOW_a093d21393777366","window","__wbg_storedroomkeybundledata_new","__wbg_storehandle_new","__wbg_stringify_c242842b97f054cc","__wbg_subarray_dd4ade7d53bd8e26","__wbg_target_15f1da583855ac4e","target","__wbg_then_82ab9fb4080f1707","then","__wbg_then_db882932c0c714c6","__wbg_todevicerequest_new","__wbg_transaction_34c41b46ca391af6","transaction","__wbg_transaction_36c8b28ed4349a9a","__wbg_transaction_399fc15f5bba1880","__wbg_update_297181dae0cc0af4","update","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_utdtodeviceevent_new","__wbg_value_17b896954e14f896","__wbg_value_648dc44894c8dc95","__wbg_values_81045499c3c8e670","values","__wbg_verificationrequest_new","__wbg_version_2c3ed4a311fdabdf","__wbg_versions_c01dfd4722a88165","versions","__wbg_warn_9b968a0475b49f6b","warn","__wbg_warn_d89f6637da554c8d","__wbindgen_array_new","__wbindgen_array_push","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","setBigInt64","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1160","__wbindgen_closure_wrapper2391","__wbindgen_closure_wrapper5618","__wbindgen_closure_wrapper7116","__wbindgen_closure_wrapper7121","__wbindgen_debug_string","__wbindgen_in","__wbindgen_init_externref_table","table","grow","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","setFloat64","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number"],"sourceRoot":""}