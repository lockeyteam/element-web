{"version":3,"file":"bundles/33bc6f3e6b9862f2c242/7766.js","mappings":"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","sources":["webpack://element-web/./src/components/views/location/LiveDurationDropdown.tsx","webpack://element-web/./src/components/views/location/shareLocation.ts","webpack://element-web/./src/components/views/location/LocationPicker.tsx","webpack://element-web/./src/components/views/location/ShareDialogButtons.tsx","webpack://element-web/./src/components/views/location/ShareType.tsx","webpack://element-web/./src/components/views/location/EnableLiveShare.tsx","webpack://element-web/./src/components/views/location/LocationShareMenu.tsx","webpack://element-web/./src/components/views/location/LocationButton.tsx","webpack://element-web/./src/components/views/location/Marker.tsx","webpack://element-web/./src/components/views/rooms/CollapsibleButton.tsx","webpack://element-web/./src/components/views/rooms/EmojiButton.tsx","webpack://element-web/./src/components/views/rooms/MessageComposerButtons.tsx"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type ReactElement } from \"react\";\n\nimport { formatDuration } from \"../../../DateUtils\";\nimport { _t } from \"../../../languageHandler\";\nimport Dropdown from \"../elements/Dropdown\";\nimport { type NonEmptyArray } from \"../../../@types/common\";\n\nconst DURATION_MS = {\n    fifteenMins: 900000,\n    oneHour: 3600000,\n    eightHours: 28800000,\n};\n\nexport const DEFAULT_DURATION_MS = DURATION_MS.fifteenMins;\n\ninterface Props {\n    timeout: number;\n    onChange: (timeout: number) => void;\n}\n\nconst getLabel = (durationMs: number): string => {\n    return _t(\"location_sharing|live_share_button\", { duration: formatDuration(durationMs) });\n};\n\nconst LiveDurationDropdown: React.FC<Props> = ({ timeout, onChange }) => {\n    const options = Object.values(DURATION_MS).map((duration) => ({\n        key: duration.toString(),\n        duration,\n        label: getLabel(duration),\n    }));\n\n    // timeout is not one of our default values\n    // eg it was set by another client\n    if (!Object.values(DURATION_MS).includes(timeout)) {\n        options.push({\n            key: timeout.toString(),\n            duration: timeout,\n            label: getLabel(timeout),\n        });\n    }\n\n    const onOptionChange = (key: string): void => {\n        // stringified value back to number\n        onChange(+key);\n    };\n\n    return (\n        <Dropdown\n            id=\"live-duration\"\n            data-testid=\"live-duration-dropdown\"\n            label={getLabel(timeout)}\n            value={timeout.toString()}\n            onOptionChange={onOptionChange}\n            className=\"mx_LiveDurationDropdown\"\n        >\n            {\n                options.map(({ key, label }) => (\n                    <div data-testid={`live-duration-option-${key}`} key={key}>\n                        {label}\n                    </div>\n                )) as NonEmptyArray<ReactElement & { key: string }>\n            }\n        </Dropdown>\n    );\n};\n\nexport default LiveDurationDropdown;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport {\n    type MatrixClient,\n    type IEventRelation,\n    type MatrixError,\n    THREAD_RELATION_TYPE,\n    ContentHelpers,\n    LocationAssetType,\n} from \"matrix-js-sdk/src/matrix\";\nimport { type RoomMessageEventContent } from \"matrix-js-sdk/src/types\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport { _t } from \"../../../languageHandler\";\nimport Modal from \"../../../Modal\";\nimport QuestionDialog, { type IQuestionDialogProps } from \"../dialogs/QuestionDialog\";\nimport SdkConfig from \"../../../SdkConfig\";\nimport { OwnBeaconStore } from \"../../../stores/OwnBeaconStore\";\nimport { doMaybeLocalRoomAction } from \"../../../utils/local-room\";\n\nexport enum LocationShareType {\n    Own = \"Own\",\n    Pin = \"Pin\",\n    Live = \"Live\",\n}\n\nexport type LocationShareProps = {\n    timeout?: number;\n    uri?: string;\n    timestamp?: number;\n};\n\n// default duration to 5min for now\nconst DEFAULT_LIVE_DURATION = 300000;\n\nexport type ShareLocationFn = (props: LocationShareProps) => Promise<void>;\n\nconst getPermissionsErrorParams = (\n    shareType: LocationShareType,\n): {\n    errorMessage: string;\n    modalParams: IQuestionDialogProps;\n} => {\n    const errorMessage =\n        shareType === LocationShareType.Live\n            ? \"Insufficient permissions to start sharing your live location\"\n            : \"Insufficient permissions to send your location\";\n\n    const modalParams = {\n        title: _t(\"location_sharing|error_no_perms_title\"),\n        description: _t(\"location_sharing|error_no_perms_description\"),\n        button: _t(\"action|ok\"),\n        hasCancelButton: false,\n        onFinished: () => {}, // NOOP\n    };\n    return { modalParams, errorMessage };\n};\n\nconst getDefaultErrorParams = (\n    shareType: LocationShareType,\n    openMenu: () => void,\n): {\n    errorMessage: string;\n    modalParams: IQuestionDialogProps;\n} => {\n    const errorMessage =\n        shareType === LocationShareType.Live\n            ? \"We couldn't start sharing your live location\"\n            : \"We couldn't send your location\";\n    const modalParams = {\n        title: _t(\"location_sharing|error_send_title\"),\n        description: _t(\"location_sharing|error_send_description\", {\n            brand: SdkConfig.get().brand,\n        }),\n        button: _t(\"action|try_again\"),\n        cancelButton: _t(\"action|cancel\"),\n        onFinished: (tryAgain: boolean) => {\n            if (tryAgain) {\n                openMenu();\n            }\n        },\n    };\n    return { modalParams, errorMessage };\n};\n\nconst handleShareError = (error: unknown, openMenu: () => void, shareType: LocationShareType): void => {\n    const { modalParams, errorMessage } =\n        (error as MatrixError).errcode === \"M_FORBIDDEN\"\n            ? getPermissionsErrorParams(shareType)\n            : getDefaultErrorParams(shareType, openMenu);\n\n    logger.error(errorMessage, error);\n\n    Modal.createDialog(QuestionDialog, modalParams);\n};\n\nexport const shareLiveLocation =\n    (client: MatrixClient, roomId: string, displayName: string, openMenu: () => void): ShareLocationFn =>\n    async ({ timeout }): Promise<void> => {\n        const description = _t(\"location_sharing|live_description\", { displayName });\n        try {\n            await OwnBeaconStore.instance.createLiveBeacon(\n                roomId,\n                ContentHelpers.makeBeaconInfoContent(\n                    timeout ?? DEFAULT_LIVE_DURATION,\n                    true /* isLive */,\n                    description,\n                    LocationAssetType.Self,\n                ),\n            );\n        } catch (error) {\n            handleShareError(error, openMenu, LocationShareType.Live);\n        }\n    };\n\nexport const shareLocation =\n    (\n        client: MatrixClient,\n        roomId: string,\n        shareType: LocationShareType,\n        relation: IEventRelation | undefined,\n        openMenu: () => void,\n    ): ShareLocationFn =>\n    async ({ uri, timestamp }): Promise<void> => {\n        if (!uri) return;\n        try {\n            const threadId = (relation?.rel_type === THREAD_RELATION_TYPE.name && relation?.event_id) || null;\n            const assetType = shareType === LocationShareType.Pin ? LocationAssetType.Pin : LocationAssetType.Self;\n            const content = ContentHelpers.makeLocationContent(\n                undefined,\n                uri,\n                timestamp,\n                undefined,\n                assetType,\n            ) as RoomMessageEventContent;\n            await doMaybeLocalRoomAction(\n                roomId,\n                (actualRoomId: string) => client.sendMessage(actualRoomId, threadId, content),\n                client,\n            );\n        } catch (error) {\n            handleShareError(error, openMenu, shareType);\n        }\n    };\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type SyntheticEvent } from \"react\";\nimport maplibregl, { type MapMouseEvent } from \"maplibre-gl\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\nimport { type RoomMember, ClientEvent, type IClientWellKnown } from \"matrix-js-sdk/src/matrix\";\n\nimport { _t } from \"../../../languageHandler\";\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\nimport Modal from \"../../../Modal\";\nimport { tileServerFromWellKnown } from \"../../../utils/WellKnownUtils\";\nimport { type GenericPosition, genericPositionFromGeolocation, getGeoUri } from \"../../../utils/beacon\";\nimport { LocationShareError, findMapStyleUrl, positionFailureMessage } from \"../../../utils/location\";\nimport ErrorDialog from \"../dialogs/ErrorDialog\";\nimport AccessibleButton from \"../elements/AccessibleButton\";\nimport { MapError } from \"./MapError\";\nimport LiveDurationDropdown, { DEFAULT_DURATION_MS } from \"./LiveDurationDropdown\";\nimport { LocationShareType, type ShareLocationFn } from \"./shareLocation\";\nimport Marker from \"./Marker\";\n\nexport interface ILocationPickerProps {\n    sender: RoomMember;\n    shareType: LocationShareType;\n    onChoose: ShareLocationFn;\n    onFinished(ev?: SyntheticEvent): void;\n}\n\ninterface IState {\n    timeout: number;\n    position?: GenericPosition;\n    error?: LocationShareError;\n}\n\nconst isSharingOwnLocation = (shareType: LocationShareType): boolean =>\n    shareType === LocationShareType.Own || shareType === LocationShareType.Live;\n\nclass LocationPicker extends React.Component<ILocationPickerProps, IState> {\n    public static contextType = MatrixClientContext;\n    declare public context: React.ContextType<typeof MatrixClientContext>;\n    private map?: maplibregl.Map;\n    private geolocate?: maplibregl.GeolocateControl;\n    private marker?: maplibregl.Marker;\n\n    public constructor(props: ILocationPickerProps) {\n        super(props);\n\n        this.state = {\n            position: undefined,\n            timeout: DEFAULT_DURATION_MS,\n            error: undefined,\n        };\n    }\n\n    private getMarkerId = (): string => {\n        return \"mx_MLocationPicker_marker\";\n    };\n\n    public componentDidMount(): void {\n        this.context.on(ClientEvent.ClientWellKnown, this.updateStyleUrl);\n\n        try {\n            this.map = new maplibregl.Map({\n                container: \"mx_LocationPicker_map\",\n                style: findMapStyleUrl(this.context),\n                center: [0, 0],\n                zoom: 1,\n            });\n\n            // Add geolocate control to the map.\n            this.geolocate = new maplibregl.GeolocateControl({\n                positionOptions: {\n                    enableHighAccuracy: true,\n                },\n                trackUserLocation: false,\n            });\n\n            this.map.addControl(this.geolocate);\n\n            this.map.on(\"error\", (e) => {\n                logger.error(\n                    \"Failed to load map: check map_style_url in config.json has a valid URL and API key\",\n                    e.error,\n                );\n                this.setState({ error: LocationShareError.MapStyleUrlNotReachable });\n            });\n\n            this.map.on(\"load\", () => {\n                this.geolocate?.trigger();\n            });\n\n            this.geolocate.on(\"error\", this.onGeolocateError);\n\n            if (isSharingOwnLocation(this.props.shareType)) {\n                this.geolocate.on(\"geolocate\", this.onGeolocate);\n            }\n\n            if (this.props.shareType === LocationShareType.Pin) {\n                const navigationControl = new maplibregl.NavigationControl({\n                    showCompass: false,\n                    showZoom: true,\n                });\n                this.map.addControl(navigationControl, \"bottom-right\");\n                this.map.on(\"click\", this.onClick);\n            }\n        } catch (e) {\n            logger.error(\"Failed to render map\", e);\n            const errorMessage = (e as Error)?.message;\n            let errorType;\n            if (errorMessage === LocationShareError.MapStyleUrlNotConfigured)\n                errorType = LocationShareError.MapStyleUrlNotConfigured;\n            else if (errorMessage.includes(\"Failed to initialize WebGL\"))\n                errorType = LocationShareError.WebGLNotEnabled;\n            else errorType = LocationShareError.Default;\n            this.setState({ error: errorType });\n        }\n    }\n\n    public componentWillUnmount(): void {\n        this.geolocate?.off(\"error\", this.onGeolocateError);\n        this.geolocate?.off(\"geolocate\", this.onGeolocate);\n        this.map?.off(\"click\", this.onClick);\n        this.context.off(ClientEvent.ClientWellKnown, this.updateStyleUrl);\n    }\n\n    private addMarkerToMap = (): void => {\n        this.marker = new maplibregl.Marker({\n            element: document.getElementById(this.getMarkerId()) ?? undefined,\n            anchor: \"bottom\",\n            offset: [0, -1],\n        })\n            .setLngLat(new maplibregl.LngLat(0, 0))\n            .addTo(this.map!);\n    };\n\n    private updateStyleUrl = (clientWellKnown: IClientWellKnown): void => {\n        const style = tileServerFromWellKnown(clientWellKnown)?.[\"map_style_url\"];\n        if (style) {\n            this.map?.setStyle(style);\n        }\n    };\n\n    private onGeolocate = (position: GeolocationPosition): void => {\n        if (!this.marker) {\n            this.addMarkerToMap();\n        }\n        this.setState({ position: genericPositionFromGeolocation(position) });\n        this.marker?.setLngLat(new maplibregl.LngLat(position.coords.longitude, position.coords.latitude));\n    };\n\n    private onClick = (event: MapMouseEvent): void => {\n        if (!this.marker) {\n            this.addMarkerToMap();\n        }\n        this.marker?.setLngLat(event.lngLat);\n        this.setState({\n            position: {\n                timestamp: Date.now(),\n                latitude: event.lngLat.lat,\n                longitude: event.lngLat.lng,\n            },\n        });\n    };\n\n    private onGeolocateError = (e: GeolocationPositionError): void => {\n        logger.error(\"Could not fetch location\", e);\n        // close the dialog and show an error when trying to share own location\n        // pin drop location without permissions is ok\n        if (isSharingOwnLocation(this.props.shareType)) {\n            this.props.onFinished();\n            Modal.createDialog(ErrorDialog, {\n                title: _t(\"location_sharing|error_fetch_location\"),\n                description: positionFailureMessage(e.code),\n            });\n        }\n\n        if (this.geolocate) {\n            this.map?.removeControl(this.geolocate);\n        }\n    };\n\n    private onTimeoutChange = (timeout: number): void => {\n        this.setState({ timeout });\n    };\n\n    private onOk = (): void => {\n        const { timeout, position } = this.state;\n\n        this.props.onChoose(\n            position\n                ? { uri: getGeoUri(position), timestamp: position.timestamp, timeout }\n                : {\n                      timeout,\n                  },\n        );\n        this.props.onFinished();\n    };\n\n    public render(): React.ReactNode {\n        if (this.state.error) {\n            return (\n                <div className=\"mx_LocationPicker mx_LocationPicker_hasError\">\n                    <MapError error={this.state.error} onFinished={this.props.onFinished} />\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"mx_LocationPicker\">\n                <div id=\"mx_LocationPicker_map\" />\n\n                {this.props.shareType === LocationShareType.Pin && (\n                    <div className=\"mx_LocationPicker_pinText\">\n                        <span>\n                            {this.state.position\n                                ? _t(\"location_sharing|click_move_pin\")\n                                : _t(\"location_sharing|click_drop_pin\")}\n                        </span>\n                    </div>\n                )}\n                <div className=\"mx_LocationPicker_footer\">\n                    <form onSubmit={this.onOk}>\n                        {this.props.shareType === LocationShareType.Live && (\n                            <LiveDurationDropdown onChange={this.onTimeoutChange} timeout={this.state.timeout} />\n                        )}\n                        <AccessibleButton\n                            data-testid=\"location-picker-submit-button\"\n                            type=\"submit\"\n                            element=\"button\"\n                            kind=\"primary\"\n                            className=\"mx_LocationPicker_submitButton\"\n                            disabled={!this.state.position}\n                            onClick={this.onOk}\n                        >\n                            {_t(\"location_sharing|share_button\")}\n                        </AccessibleButton>\n                    </form>\n                </div>\n                <div id={this.getMarkerId()}>\n                    {/*\n                    maplibregl hijacks the div above to style the marker\n                    it must be in the dom when the map is initialised\n                    and keep a consistent class\n                    we want to hide the marker until it is set in the case of pin drop\n                    so hide the internal visible elements\n                    */}\n\n                    {!!this.marker && (\n                        <Marker\n                            roomMember={isSharingOwnLocation(this.props.shareType) ? this.props.sender : undefined}\n                            useMemberColor={this.props.shareType === LocationShareType.Live}\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LocationPicker;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React from \"react\";\nimport CloseIcon from \"@vector-im/compound-design-tokens/assets/web/icons/close\";\nimport BackIcon from \"@vector-im/compound-design-tokens/assets/web/icons/chevron-left\";\n\nimport AccessibleButton from \"../elements/AccessibleButton\";\nimport { _t } from \"../../../languageHandler\";\n\ninterface Props {\n    onCancel: () => void;\n    onBack: () => void;\n    displayBack?: boolean;\n}\n\nconst ShareDialogButtons: React.FC<Props> = ({ onBack, onCancel, displayBack }) => {\n    return (\n        <div className=\"mx_ShareDialogButtons\">\n            {displayBack && (\n                <AccessibleButton\n                    className=\"mx_ShareDialogButtons_button left\"\n                    data-testid=\"share-dialog-buttons-back\"\n                    aria-label={_t(\"action|back\")}\n                    onClick={onBack}\n                    element=\"button\"\n                >\n                    <BackIcon className=\"mx_ShareDialogButtons_button-icon\" />\n                </AccessibleButton>\n            )}\n            <AccessibleButton\n                className=\"mx_ShareDialogButtons_button right\"\n                data-testid=\"share-dialog-buttons-cancel\"\n                aria-label={_t(\"action|close\")}\n                onClick={onCancel}\n                element=\"button\"\n            >\n                <CloseIcon className=\"mx_ShareDialogButtons_button-icon\" />\n            </AccessibleButton>\n        </div>\n    );\n};\n\nexport default ShareDialogButtons;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type HTMLAttributes, useContext } from \"react\";\nimport LocationIcon from \"@vector-im/compound-design-tokens/assets/web/icons/location-pin-solid\";\n\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\nimport { _t } from \"../../../languageHandler\";\nimport { OwnProfileStore } from \"../../../stores/OwnProfileStore\";\nimport BaseAvatar from \"../avatars/BaseAvatar\";\nimport AccessibleButton, { type ButtonEvent } from \"../elements/AccessibleButton\";\nimport Heading from \"../typography/Heading\";\nimport { LocationShareType } from \"./shareLocation\";\nimport StyledLiveBeaconIcon from \"../beacon/StyledLiveBeaconIcon\";\n\nconst UserAvatar: React.FC = () => {\n    const matrixClient = useContext(MatrixClientContext);\n    const userId = matrixClient.getSafeUserId();\n    const displayName = OwnProfileStore.instance.displayName ?? undefined;\n    // 40 - 2px border\n    const avatarSize = \"36px\";\n    const avatarUrl = OwnProfileStore.instance.getHttpAvatarUrl(parseInt(avatarSize, 10)) ?? undefined;\n\n    return (\n        <div className={`mx_ShareType_option-icon ${LocationShareType.Own}`}>\n            <BaseAvatar\n                idName={userId}\n                name={displayName}\n                url={avatarUrl}\n                size={avatarSize}\n                className=\"mx_UserMenu_userAvatar_BaseAvatar\"\n            />\n        </div>\n    );\n};\n\ntype ShareTypeOptionProps = HTMLAttributes<Element> & {\n    label: string;\n    shareType: LocationShareType;\n    onClick?: ((e: ButtonEvent) => void | Promise<void>) | null;\n};\nconst ShareTypeOption: React.FC<ShareTypeOptionProps> = ({ onClick, label, shareType, ...rest }) => (\n    <AccessibleButton element=\"button\" className=\"mx_ShareType_option\" onClick={onClick ?? null} {...rest}>\n        {shareType === LocationShareType.Own && <UserAvatar />}\n        {shareType === LocationShareType.Pin && (\n            <LocationIcon className={`mx_ShareType_option-icon ${LocationShareType.Pin}`} />\n        )}\n        {shareType === LocationShareType.Live && (\n            <StyledLiveBeaconIcon className={`mx_ShareType_option-icon ${LocationShareType.Live}`} />\n        )}\n\n        {label}\n    </AccessibleButton>\n);\n\ninterface Props {\n    setShareType: (shareType: LocationShareType) => void;\n    enabledShareTypes: LocationShareType[];\n}\nconst ShareType: React.FC<Props> = ({ setShareType, enabledShareTypes }) => {\n    const labels = {\n        [LocationShareType.Own]: _t(\"location_sharing|share_type_own\"),\n        [LocationShareType.Live]: _t(\"location_sharing|share_type_live\"),\n        [LocationShareType.Pin]: _t(\"location_sharing|share_type_pin\"),\n    };\n    return (\n        <div className=\"mx_ShareType\">\n            <LocationIcon className=\"mx_ShareType_badge\" />\n            <Heading className=\"mx_ShareType_heading\" size=\"3\">\n                {_t(\"location_sharing|share_type_prompt\")}\n            </Heading>\n            <div className=\"mx_ShareType_wrapper_options\">\n                {enabledShareTypes.map((type) => (\n                    <ShareTypeOption\n                        key={type}\n                        onClick={() => setShareType(type)}\n                        label={labels[type]}\n                        shareType={type}\n                        data-testid={`share-location-option-${type}`}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default ShareType;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { useState } from \"react\";\n\nimport { _t } from \"../../../languageHandler\";\nimport StyledLiveBeaconIcon from \"../beacon/StyledLiveBeaconIcon\";\nimport AccessibleButton from \"../elements/AccessibleButton\";\nimport LabelledToggleSwitch from \"../elements/LabelledToggleSwitch\";\nimport Heading from \"../typography/Heading\";\n\ninterface Props {\n    onSubmit: () => void;\n}\n\nexport const EnableLiveShare: React.FC<Props> = ({ onSubmit }) => {\n    const [isEnabled, setEnabled] = useState(false);\n    return (\n        <div data-testid=\"location-picker-enable-live-share\" className=\"mx_EnableLiveShare\">\n            <StyledLiveBeaconIcon className=\"mx_EnableLiveShare_icon\" />\n            <Heading className=\"mx_EnableLiveShare_heading\" size=\"3\">\n                {_t(\"location_sharing|live_enable_heading\")}\n            </Heading>\n            <p className=\"mx_EnableLiveShare_description\">{_t(\"location_sharing|live_enable_description\")}</p>\n            <LabelledToggleSwitch\n                data-testid=\"enable-live-share-toggle\"\n                value={isEnabled}\n                onChange={setEnabled}\n                label={_t(\"location_sharing|live_toggle_label\")}\n            />\n            <AccessibleButton\n                data-testid=\"enable-live-share-submit\"\n                className=\"mx_EnableLiveShare_button\"\n                element=\"button\"\n                kind=\"primary\"\n                onClick={onSubmit}\n                disabled={!isEnabled}\n            >\n                {_t(\"action|ok\")}\n            </AccessibleButton>\n        </div>\n    );\n};\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type SyntheticEvent, useContext, useState } from \"react\";\nimport { type Room, type IEventRelation } from \"matrix-js-sdk/src/matrix\";\n\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\nimport ContextMenu, { type MenuProps } from \"../../structures/ContextMenu\";\nimport LocationPicker, { type ILocationPickerProps } from \"./LocationPicker\";\nimport { shareLiveLocation, shareLocation, LocationShareType } from \"./shareLocation\";\nimport SettingsStore from \"../../../settings/SettingsStore\";\nimport ShareDialogButtons from \"./ShareDialogButtons\";\nimport ShareType from \"./ShareType\";\nimport { OwnProfileStore } from \"../../../stores/OwnProfileStore\";\nimport { EnableLiveShare } from \"./EnableLiveShare\";\nimport { useFeatureEnabled } from \"../../../hooks/useSettings\";\nimport { SettingLevel } from \"../../../settings/SettingLevel\";\n\ntype Props = Omit<ILocationPickerProps, \"onChoose\" | \"shareType\"> & {\n    onFinished: (ev?: SyntheticEvent) => void;\n    menuPosition: MenuProps;\n    openMenu: () => void;\n    roomId: Room[\"roomId\"];\n    relation?: IEventRelation;\n};\n\nconst getEnabledShareTypes = (relation?: IEventRelation): LocationShareType[] => {\n    const enabledShareTypes = [LocationShareType.Own];\n\n    // live locations cannot have a relation\n    // hide the option when composer has a relation\n    if (!relation) {\n        enabledShareTypes.push(LocationShareType.Live);\n    }\n\n    enabledShareTypes.push(LocationShareType.Pin);\n\n    return enabledShareTypes;\n};\n\nconst LocationShareMenu: React.FC<Props> = ({ menuPosition, onFinished, sender, roomId, openMenu, relation }) => {\n    const matrixClient = useContext(MatrixClientContext);\n    const enabledShareTypes = getEnabledShareTypes(relation);\n    const isLiveShareEnabled = useFeatureEnabled(\"feature_location_share_live\");\n\n    const multipleShareTypesEnabled = enabledShareTypes.length > 1;\n\n    const [shareType, setShareType] = useState<LocationShareType | undefined>(\n        multipleShareTypesEnabled ? undefined : LocationShareType.Own,\n    );\n\n    const displayName = OwnProfileStore.instance.displayName;\n    const userId = matrixClient.getSafeUserId();\n\n    const onLocationSubmit =\n        shareType === LocationShareType.Live\n            ? shareLiveLocation(matrixClient, roomId, displayName || userId, openMenu)\n            : shareLocation(matrixClient, roomId, shareType ?? LocationShareType.Own, relation, openMenu);\n\n    const onLiveShareEnableSubmit = (): void => {\n        SettingsStore.setValue(\"feature_location_share_live\", null, SettingLevel.DEVICE, true);\n    };\n\n    const shouldAdvertiseLiveLabsFlag = shareType === LocationShareType.Live && !isLiveShareEnabled;\n\n    return (\n        <ContextMenu {...menuPosition} onFinished={onFinished} managed={false}>\n            <div className=\"mx_LocationShareMenu\">\n                {shouldAdvertiseLiveLabsFlag && <EnableLiveShare onSubmit={onLiveShareEnableSubmit} />}\n                {!shouldAdvertiseLiveLabsFlag && !!shareType && (\n                    <LocationPicker\n                        sender={sender}\n                        shareType={shareType}\n                        onChoose={onLocationSubmit}\n                        onFinished={onFinished}\n                    />\n                )}\n                {!shareType && <ShareType setShareType={setShareType} enabledShareTypes={enabledShareTypes} />}\n                <ShareDialogButtons\n                    displayBack={!!shareType && multipleShareTypesEnabled}\n                    onBack={() => setShareType(undefined)}\n                    onCancel={onFinished}\n                />\n            </div>\n        </ContextMenu>\n    );\n};\n\nexport default LocationShareMenu;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type ReactNode, type SyntheticEvent, useContext } from \"react\";\nimport classNames from \"classnames\";\nimport { type RoomMember, type IEventRelation } from \"matrix-js-sdk/src/matrix\";\n\nimport { _t } from \"../../../languageHandler\";\nimport { CollapsibleButton } from \"../rooms/CollapsibleButton\";\nimport { aboveLeftOf, useContextMenu, type MenuProps } from \"../../structures/ContextMenu\";\nimport { OverflowMenuContext } from \"../rooms/MessageComposerButtons\";\nimport LocationShareMenu from \"./LocationShareMenu\";\n\nexport interface IProps {\n    roomId: string;\n    sender: RoomMember;\n    menuPosition?: MenuProps;\n    relation?: IEventRelation;\n}\n\nconst LocationButton: React.FC<IProps> = ({ roomId, sender, menuPosition, relation }) => {\n    const overflowMenuCloser = useContext(OverflowMenuContext);\n    const [menuDisplayed, button, openMenu, closeMenu] = useContextMenu();\n\n    const _onFinished = (ev?: SyntheticEvent): void => {\n        closeMenu(ev);\n        overflowMenuCloser?.();\n    };\n\n    let contextMenu: ReactNode = null;\n    if (menuDisplayed) {\n        const position = menuPosition ?? (button.current && aboveLeftOf(button.current.getBoundingClientRect())) ?? {};\n\n        contextMenu = (\n            <LocationShareMenu\n                menuPosition={position}\n                onFinished={_onFinished}\n                sender={sender}\n                roomId={roomId}\n                openMenu={openMenu}\n                relation={relation}\n            />\n        );\n    }\n\n    const className = classNames(\"mx_MessageComposer_button\", {\n        mx_MessageComposer_button_highlight: menuDisplayed,\n    });\n\n    return (\n        <React.Fragment>\n            <CollapsibleButton\n                className={className}\n                iconClassName=\"mx_MessageComposer_location\"\n                onClick={openMenu}\n                title={_t(\"common|location\")}\n                inputRef={button}\n            />\n\n            {contextMenu}\n        </React.Fragment>\n    );\n};\n\nexport default LocationButton;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type JSX, type ReactNode, type Ref, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { type RoomMember } from \"matrix-js-sdk/src/matrix\";\nimport LocationIcon from \"@vector-im/compound-design-tokens/assets/web/icons/location-pin-solid\";\n\nimport { getUserNameColorClass } from \"../../../utils/FormattingUtils\";\nimport MemberAvatar from \"../avatars/MemberAvatar\";\n\ninterface Props {\n    id?: string;\n    // renders MemberAvatar when provided\n    roomMember?: RoomMember;\n    // use member text color as background\n    useMemberColor?: boolean;\n    tooltip?: ReactNode;\n    ref?: Ref<HTMLDivElement>;\n}\n\n/**\n * Wrap with tooltip handlers when\n * tooltip is truthy\n */\nconst OptionalTooltip: React.FC<{\n    tooltip?: ReactNode;\n    children: ReactNode;\n}> = ({ tooltip, children }) => {\n    const [isVisible, setIsVisible] = useState(false);\n    if (!tooltip) {\n        return <>{children}</>;\n    }\n\n    const show = (): void => setIsVisible(true);\n    const hide = (): void => setIsVisible(false);\n    const toggleVisibility = (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\n        // stop map from zooming in on click\n        e.stopPropagation();\n        setIsVisible(!isVisible);\n    };\n\n    return (\n        <div onMouseEnter={show} onClick={toggleVisibility} onMouseLeave={hide}>\n            {children}\n            {isVisible && tooltip}\n        </div>\n    );\n};\n\n/**\n * Generic location marker\n */\nconst Marker = ({ id, roomMember, useMemberColor, tooltip, ref }: Props): JSX.Element => {\n    const memberColorClass = useMemberColor && roomMember ? getUserNameColorClass(roomMember.userId) : \"\";\n    return (\n        <div\n            ref={ref}\n            id={id}\n            className={classNames(\"mx_Marker\", memberColorClass, {\n                mx_Marker_defaultColor: !memberColorClass,\n            })}\n        >\n            <OptionalTooltip tooltip={tooltip}>\n                <div className=\"mx_Marker_border\">\n                    {roomMember ? (\n                        <MemberAvatar\n                            member={roomMember}\n                            size=\"36px\"\n                            viewUserOnClick={false}\n                            // no mxid on hover when marker has tooltip\n                            hideTitle={!!tooltip}\n                        />\n                    ) : (\n                        <LocationIcon className=\"mx_Marker_icon\" />\n                    )}\n                </div>\n            </OptionalTooltip>\n        </div>\n    );\n};\n\nexport default Marker;\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport React, { type RefObject, useContext } from \"react\";\nimport classNames from \"classnames\";\n\nimport AccessibleButton, { type ButtonProps } from \"../elements/AccessibleButton\";\nimport { OverflowMenuContext } from \"./MessageComposerButtons\";\nimport { IconizedContextMenuOption } from \"../context_menus/IconizedContextMenu\";\n\ninterface Props extends Omit<ButtonProps<\"div\">, \"element\"> {\n    inputRef?: RefObject<HTMLElement | null>;\n    title: string;\n    iconClassName: string;\n}\n\nexport const CollapsibleButton: React.FC<Props> = ({\n    title,\n    children,\n    className,\n    iconClassName,\n    inputRef,\n    ...props\n}) => {\n    const inOverflowMenu = !!useContext(OverflowMenuContext);\n    if (inOverflowMenu) {\n        return <IconizedContextMenuOption {...props} iconClassName={iconClassName} label={title} inputRef={inputRef} />;\n    }\n\n    return (\n        <AccessibleButton {...props} title={title} className={classNames(className, iconClassName)} ref={inputRef}>\n            {children}\n        </AccessibleButton>\n    );\n};\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport classNames from \"classnames\";\nimport React, { type JSX, useContext } from \"react\";\n\nimport { _t } from \"../../../languageHandler\";\nimport ContextMenu, { aboveLeftOf, type MenuProps, useContextMenu } from \"../../structures/ContextMenu\";\nimport EmojiPicker from \"../emojipicker/EmojiPicker\";\nimport { CollapsibleButton } from \"./CollapsibleButton\";\nimport { OverflowMenuContext } from \"./MessageComposerButtons\";\n\ninterface IEmojiButtonProps {\n    addEmoji: (unicode: string) => boolean;\n    menuPosition?: MenuProps;\n    className?: string;\n}\n\nexport function EmojiButton({ addEmoji, menuPosition, className }: IEmojiButtonProps): JSX.Element {\n    const overflowMenuCloser = useContext(OverflowMenuContext);\n    const [menuDisplayed, button, openMenu, closeMenu] = useContextMenu();\n\n    let contextMenu: React.ReactElement | null = null;\n    if (menuDisplayed && button.current) {\n        const position = menuPosition ?? aboveLeftOf(button.current.getBoundingClientRect());\n        const onFinished = (): void => {\n            closeMenu();\n            overflowMenuCloser?.();\n        };\n\n        contextMenu = (\n            <ContextMenu {...position} onFinished={onFinished} managed={false}>\n                <EmojiPicker onChoose={addEmoji} onFinished={onFinished} />\n            </ContextMenu>\n        );\n    }\n\n    const computedClassName = classNames(\"mx_EmojiButton\", className, {\n        mx_EmojiButton_highlight: menuDisplayed,\n    });\n\n    // TODO: replace ContextMenuTooltipButton with a unified representation of\n    // the header buttons and the right panel buttons\n    return (\n        <>\n            <CollapsibleButton\n                className={computedClassName}\n                iconClassName=\"mx_EmojiButton_icon\"\n                onClick={openMenu}\n                title={_t(\"common|emoji\")}\n                inputRef={button}\n            />\n\n            {contextMenu}\n        </>\n    );\n}\n","/*\nCopyright 2024 New Vector Ltd.\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\nPlease see LICENSE files in the repository root for full details.\n*/\n\nimport classNames from \"classnames\";\nimport {\n    type IEventRelation,\n    type Room,\n    type MatrixClient,\n    THREAD_RELATION_TYPE,\n    M_POLL_START,\n} from \"matrix-js-sdk/src/matrix\";\nimport React, { type JSX, createContext, type ReactElement, type ReactNode, useContext, useRef } from \"react\";\n\nimport { _t } from \"../../../languageHandler\";\nimport { CollapsibleButton } from \"./CollapsibleButton\";\nimport { type MenuProps } from \"../../structures/ContextMenu\";\nimport dis from \"../../../dispatcher/dispatcher\";\nimport ErrorDialog from \"../dialogs/ErrorDialog\";\nimport { LocationButton } from \"../location\";\nimport Modal from \"../../../Modal\";\nimport PollCreateDialog from \"../elements/PollCreateDialog\";\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\nimport ContentMessages from \"../../../ContentMessages\";\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\nimport { useDispatcher } from \"../../../hooks/useDispatcher\";\nimport { chromeFileInputFix } from \"../../../utils/BrowserWorkarounds\";\nimport IconizedContextMenu, { IconizedContextMenuOptionList } from \"../context_menus/IconizedContextMenu\";\nimport { EmojiButton } from \"./EmojiButton\";\nimport { filterBoolean } from \"../../../utils/arrays\";\nimport { useSettingValue } from \"../../../hooks/useSettings\";\nimport AccessibleButton, { type ButtonEvent } from \"../elements/AccessibleButton\";\nimport { useScopedRoomContext } from \"../../../contexts/ScopedRoomContext.tsx\";\n\ninterface IProps {\n    addEmoji: (emoji: string) => boolean;\n    haveRecording: boolean;\n    isMenuOpen: boolean;\n    isStickerPickerOpen: boolean;\n    menuPosition?: MenuProps;\n    onRecordStartEndClick: () => void;\n    relation?: IEventRelation;\n    setStickerPickerOpen: (isStickerPickerOpen: boolean) => void;\n    showLocationButton: boolean;\n    showPollsButton: boolean;\n    showStickersButton: boolean;\n    toggleButtonMenu: () => void;\n    isRichTextEnabled: boolean;\n    onComposerModeClick: () => void;\n}\n\ntype OverflowMenuCloser = () => void;\nexport const OverflowMenuContext = createContext<OverflowMenuCloser | null>(null);\n\nconst MessageComposerButtons: React.FC<IProps> = (props: IProps) => {\n    const matrixClient = useContext(MatrixClientContext);\n    const { room, narrow } = useScopedRoomContext(\"room\", \"narrow\");\n\n    const isWysiwygLabEnabled = useSettingValue(\"feature_wysiwyg_composer\");\n\n    if (!matrixClient || !room || props.haveRecording) {\n        return null;\n    }\n\n    let mainButtons: ReactNode[];\n    let moreButtons: ReactNode[];\n    if (narrow) {\n        mainButtons = [\n            isWysiwygLabEnabled ? (\n                <ComposerModeButton\n                    key=\"composerModeButton\"\n                    isRichTextEnabled={props.isRichTextEnabled}\n                    onClick={props.onComposerModeClick}\n                />\n            ) : (\n                emojiButton(props)\n            ),\n        ];\n        moreButtons = [\n            uploadButton(), // props passed via UploadButtonContext\n            showStickersButton(props),\n            voiceRecordingButton(props, narrow),\n            props.showPollsButton ? pollButton(room, props.relation) : null,\n            showLocationButton(props, room, matrixClient),\n        ];\n    } else {\n        mainButtons = [\n            isWysiwygLabEnabled ? (\n                <ComposerModeButton\n                    key=\"composerModeButton\"\n                    isRichTextEnabled={props.isRichTextEnabled}\n                    onClick={props.onComposerModeClick}\n                />\n            ) : (\n                emojiButton(props)\n            ),\n            uploadButton(), // props passed via UploadButtonContext\n        ];\n        moreButtons = [\n            showStickersButton(props),\n            voiceRecordingButton(props, narrow),\n            props.showPollsButton ? pollButton(room, props.relation) : null,\n            showLocationButton(props, room, matrixClient),\n        ];\n    }\n\n    mainButtons = filterBoolean(mainButtons);\n    moreButtons = filterBoolean(moreButtons);\n\n    const moreOptionsClasses = classNames({\n        mx_MessageComposer_button: true,\n        mx_MessageComposer_buttonMenu: true,\n        mx_MessageComposer_closeButtonMenu: props.isMenuOpen,\n    });\n\n    return (\n        <UploadButtonContextProvider roomId={room.roomId} relation={props.relation}>\n            {mainButtons}\n            {moreButtons.length > 0 && (\n                <AccessibleButton\n                    className={moreOptionsClasses}\n                    onClick={props.toggleButtonMenu}\n                    title={_t(\"quick_settings|sidebar_settings\")}\n                />\n            )}\n            {props.isMenuOpen && (\n                <IconizedContextMenu\n                    onFinished={props.toggleButtonMenu}\n                    {...props.menuPosition}\n                    wrapperClassName=\"mx_MessageComposer_Menu\"\n                    compact={true}\n                >\n                    <OverflowMenuContext.Provider value={props.toggleButtonMenu}>\n                        <IconizedContextMenuOptionList>{moreButtons}</IconizedContextMenuOptionList>\n                    </OverflowMenuContext.Provider>\n                </IconizedContextMenu>\n            )}\n        </UploadButtonContextProvider>\n    );\n};\n\nfunction emojiButton(props: IProps): ReactElement {\n    return (\n        <EmojiButton\n            key=\"emoji_button\"\n            addEmoji={props.addEmoji}\n            menuPosition={props.menuPosition}\n            className=\"mx_MessageComposer_button\"\n        />\n    );\n}\n\nfunction uploadButton(): ReactElement {\n    return <UploadButton key=\"controls_upload\" />;\n}\n\ntype UploadButtonFn = () => void;\nexport const UploadButtonContext = createContext<UploadButtonFn | null>(null);\n\ninterface IUploadButtonProps {\n    roomId: string;\n    relation?: IEventRelation;\n    children: ReactNode;\n}\n\n// We put the file input outside the UploadButton component so that it doesn't get killed when the context menu closes.\nconst UploadButtonContextProvider: React.FC<IUploadButtonProps> = ({ roomId, relation, children }) => {\n    const cli = useContext(MatrixClientContext);\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\n    const uploadInput = useRef<HTMLInputElement>(null);\n\n    const onUploadClick = (): void => {\n        if (cli?.isGuest()) {\n            dis.dispatch({ action: \"require_registration\" });\n            return;\n        }\n        uploadInput.current?.click();\n    };\n\n    useDispatcher(dis, (payload) => {\n        if (roomContext.timelineRenderingType === payload.context && payload.action === \"upload_file\") {\n            onUploadClick();\n        }\n    });\n\n    const onUploadFileInputChange = (ev: React.ChangeEvent<HTMLInputElement>): void => {\n        if (ev.target.files?.length === 0) return;\n\n        // Take a copy, so we can safely reset the value of the form control\n        ContentMessages.sharedInstance().sendContentListToRoom(\n            Array.from(ev.target.files!),\n            roomId,\n            relation,\n            cli,\n            roomContext.timelineRenderingType,\n        );\n\n        // This is the onChange handler for a file form control, but we're\n        // not keeping any state, so reset the value of the form control\n        // to empty.\n        // NB. we need to set 'value': the 'files' property is immutable.\n        ev.target.value = \"\";\n    };\n\n    const uploadInputStyle = { display: \"none\" };\n    return (\n        <UploadButtonContext.Provider value={onUploadClick}>\n            {children}\n\n            <input\n                ref={uploadInput}\n                type=\"file\"\n                style={uploadInputStyle}\n                multiple\n                onClick={chromeFileInputFix}\n                onChange={onUploadFileInputChange}\n            />\n        </UploadButtonContext.Provider>\n    );\n};\n\n// Must be rendered within an UploadButtonContextProvider\nconst UploadButton: React.FC = () => {\n    const overflowMenuCloser = useContext(OverflowMenuContext);\n    const uploadButtonFn = useContext(UploadButtonContext);\n\n    const onClick = (): void => {\n        uploadButtonFn?.();\n        overflowMenuCloser?.(); // close overflow menu\n    };\n\n    return (\n        <CollapsibleButton\n            className=\"mx_MessageComposer_button\"\n            iconClassName=\"mx_MessageComposer_upload\"\n            onClick={onClick}\n            title={_t(\"common|attachment\")}\n        />\n    );\n};\n\nfunction showStickersButton(props: IProps): ReactElement | null {\n    return props.showStickersButton ? (\n        <CollapsibleButton\n            id=\"stickersButton\"\n            key=\"controls_stickers\"\n            className=\"mx_MessageComposer_button\"\n            iconClassName=\"mx_MessageComposer_stickers\"\n            onClick={() => props.setStickerPickerOpen(!props.isStickerPickerOpen)}\n            title={props.isStickerPickerOpen ? _t(\"composer|close_sticker_picker\") : _t(\"common|sticker\")}\n        />\n    ) : null;\n}\n\nfunction voiceRecordingButton(props: IProps, narrow: boolean): ReactElement | null {\n    // XXX: recording UI does not work well in narrow mode, so hide for now\n    return narrow ? null : (\n        <CollapsibleButton\n            key=\"voice_message_send\"\n            className=\"mx_MessageComposer_button\"\n            iconClassName=\"mx_MessageComposer_voiceMessage\"\n            onClick={props.onRecordStartEndClick}\n            title={_t(\"composer|voice_message_button\")}\n        />\n    );\n}\n\nfunction pollButton(room: Room, relation?: IEventRelation): ReactElement {\n    return <PollButton key=\"polls\" room={room} relation={relation} />;\n}\n\ninterface IPollButtonProps {\n    room: Room;\n    relation?: IEventRelation;\n}\n\nclass PollButton extends React.PureComponent<IPollButtonProps> {\n    public static contextType = OverflowMenuContext;\n    declare public context: React.ContextType<typeof OverflowMenuContext>;\n\n    private onCreateClick = (): void => {\n        this.context?.(); // close overflow menu\n        const canSend = this.props.room.currentState.maySendEvent(\n            M_POLL_START.name,\n            MatrixClientPeg.safeGet().getSafeUserId(),\n        );\n        if (!canSend) {\n            Modal.createDialog(ErrorDialog, {\n                title: _t(\"composer|poll_button_no_perms_title\"),\n                description: _t(\"composer|poll_button_no_perms_description\"),\n            });\n        } else {\n            const threadId =\n                this.props.relation?.rel_type === THREAD_RELATION_TYPE.name ? this.props.relation.event_id : undefined;\n\n            Modal.createDialog(\n                PollCreateDialog,\n                {\n                    room: this.props.room,\n                    threadId,\n                },\n                \"mx_CompoundDialog\",\n                false, // isPriorityModal\n                true, // isStaticModal\n            );\n        }\n    };\n\n    public render(): React.ReactNode {\n        // do not allow sending polls within threads at this time\n        if (this.props.relation?.rel_type === THREAD_RELATION_TYPE.name) return null;\n\n        return (\n            <CollapsibleButton\n                className=\"mx_MessageComposer_button\"\n                iconClassName=\"mx_MessageComposer_poll\"\n                onClick={this.onCreateClick}\n                title={_t(\"composer|poll_button\")}\n            />\n        );\n    }\n}\n\nfunction showLocationButton(props: IProps, room: Room, matrixClient: MatrixClient): ReactElement | null {\n    const sender = room.getMember(matrixClient.getSafeUserId());\n\n    return props.showLocationButton && sender ? (\n        <LocationButton\n            key=\"location\"\n            roomId={room.roomId}\n            relation={props.relation}\n            sender={sender}\n            menuPosition={props.menuPosition}\n        />\n    ) : null;\n}\n\ninterface WysiwygToggleButtonProps {\n    isRichTextEnabled: boolean;\n    onClick: (ev: ButtonEvent) => void;\n}\n\nfunction ComposerModeButton({ isRichTextEnabled, onClick }: WysiwygToggleButtonProps): JSX.Element {\n    const title = isRichTextEnabled ? _t(\"composer|mode_plain\") : _t(\"composer|mode_rich_text\");\n\n    return (\n        <CollapsibleButton\n            className=\"mx_MessageComposer_button\"\n            iconClassName={classNames({\n                mx_MessageComposer_plain_text: !isRichTextEnabled,\n                mx_MessageComposer_rich_text: isRichTextEnabled,\n            })}\n            onClick={onClick}\n            title={title}\n        />\n    );\n}\n\nexport default MessageComposerButtons;\n"],"names":["DURATION_MS","fifteenMins","oneHour","eightHours","DEFAULT_DURATION_MS","getLabel","durationMs","_t","duration","formatDuration","LiveDurationDropdown","timeout","onChange","options","Object","values","map","key","toString","label","includes","push","React","Dropdown","id","value","onOptionChange","className","LocationShareType","handleShareError","error","openMenu","shareType","modalParams","errorMessage","errcode","Live","title","description","button","hasCancelButton","onFinished","getPermissionsErrorParams","getDefaultErrorParams","brand","SdkConfig","get","cancelButton","tryAgain","logger","Modal","createDialog","QuestionDialog","isSharingOwnLocation","Own","LocationPicker","constructor","props","super","_defineProperty","_document$getElementB","this","marker","maplibregl","element","document","getElementById","getMarkerId","undefined","anchor","offset","setLngLat","addTo","clientWellKnown","_tileServerFromWellKn","style","tileServerFromWellKnown","_this$map","setStyle","position","_this$marker","addMarkerToMap","setState","genericPositionFromGeolocation","coords","longitude","latitude","event","_this$marker2","lngLat","timestamp","Date","now","lat","lng","e","_this$map2","ErrorDialog","positionFailureMessage","code","geolocate","removeControl","state","onChoose","uri","getGeoUri","componentDidMount","context","on","ClientEvent","ClientWellKnown","updateStyleUrl","container","findMapStyleUrl","center","zoom","positionOptions","enableHighAccuracy","trackUserLocation","addControl","LocationShareError","MapStyleUrlNotReachable","_this$geolocate","trigger","onGeolocateError","onGeolocate","Pin","navigationControl","showCompass","showZoom","onClick","message","errorType","MapStyleUrlNotConfigured","WebGLNotEnabled","Default","componentWillUnmount","_this$geolocate2","_this$geolocate3","_this$map3","off","render","MapError","onSubmit","onOk","onTimeoutChange","AccessibleButton","type","kind","disabled","Marker","roomMember","sender","useMemberColor","MatrixClientContext","ShareDialogButtons","onBack","onCancel","displayBack","BackIcon","CloseIcon","UserAvatar","_OwnProfileStore$inst","_OwnProfileStore$inst2","userId","useContext","getSafeUserId","displayName","OwnProfileStore","instance","avatarSize","avatarUrl","getHttpAvatarUrl","parseInt","BaseAvatar","idName","name","url","size","ShareTypeOption","_ref","rest","_objectWithoutProperties","_excluded","_extends","LocationIcon","StyledLiveBeaconIcon","ShareType","setShareType","enabledShareTypes","labels","Heading","EnableLiveShare","isEnabled","setEnabled","useState","LabelledToggleSwitch","LocationShareMenu","menuPosition","roomId","relation","matrixClient","getEnabledShareTypes","isLiveShareEnabled","useFeatureEnabled","multipleShareTypesEnabled","length","onLocationSubmit","shareLiveLocation","client","async","OwnBeaconStore","createLiveBeacon","ContentHelpers","LocationAssetType","Self","shareLocation","threadId","rel_type","THREAD_RELATION_TYPE","event_id","assetType","content","doMaybeLocalRoomAction","actualRoomId","sendMessage","shouldAdvertiseLiveLabsFlag","ContextMenu","managed","onLiveShareEnableSubmit","SettingsStore","setValue","SettingLevel","DEVICE","LocationButton","overflowMenuCloser","OverflowMenuContext","menuDisplayed","closeMenu","useContextMenu","_onFinished","ev","contextMenu","current","aboveLeftOf","getBoundingClientRect","classNames","mx_MessageComposer_button_highlight","CollapsibleButton","iconClassName","inputRef","OptionalTooltip","tooltip","children","isVisible","setIsVisible","onMouseEnter","show","stopPropagation","onMouseLeave","hide","ref","memberColorClass","getUserNameColorClass","mx_Marker_defaultColor","MemberAvatar","member","viewUserOnClick","hideTitle","IconizedContextMenuOption","EmojiButton","addEmoji","EmojiPicker","computedClassName","mx_EmojiButton_highlight","createContext","emojiButton","uploadButton","UploadButton","UploadButtonContext","UploadButtonContextProvider","cli","roomContext","useScopedRoomContext","uploadInput","useRef","onUploadClick","_uploadInput$current","isGuest","dis","dispatch","action","click","useDispatcher","payload","timelineRenderingType","Provider","display","multiple","chromeFileInputFix","_ev$target$files","target","files","ContentMessages","sharedInstance","sendContentListToRoom","Array","from","uploadButtonFn","showStickersButton","setStickerPickerOpen","isStickerPickerOpen","voiceRecordingButton","narrow","onRecordStartEndClick","pollButton","room","PollButton","args","_this$context","call","currentState","maySendEvent","M_POLL_START","MatrixClientPeg","safeGet","_this$props$relation","PollCreateDialog","_this$props$relation2","onCreateClick","showLocationButton","getMember","ComposerModeButton","isRichTextEnabled","mx_MessageComposer_plain_text","mx_MessageComposer_rich_text","isWysiwygLabEnabled","useSettingValue","haveRecording","mainButtons","moreButtons","onComposerModeClick","showPollsButton","filterBoolean","moreOptionsClasses","mx_MessageComposer_button","mx_MessageComposer_buttonMenu","mx_MessageComposer_closeButtonMenu","isMenuOpen","toggleButtonMenu","IconizedContextMenu","wrapperClassName","compact","IconizedContextMenuOptionList"],"sourceRoot":""}